{"row_cnt": -999, "syntax_error_cnt": -999}
{"db_id": "debit_card_specializing", "predict_query": "SELECT \n    COUNT(CASE WHEN customers.Currency = 'EUR' THEN 1 END) / COUNT(CASE WHEN customers.Currency = 'CZK' THEN 1 END)\nFROM customers;", "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT customers.CustomerID, customers.Segment, yearmonth.Consumption\nFROM customers\nJOIN yearmonth\nON customers.CustomerID = yearmonth.CustomerID\nWHERE yearmonth.Date = '2012-01-01'\nAND customers.Segment = 'LAM'\nORDER BY yearmonth.Consumption ASC\nLIMIT 1", "question": "In 2012, who had the least consumption in LAM?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT AVG(Consumption)\nFROM yearmonth\nWHERE Date LIKE '2013%'\nAND CustomerID IN (\n    SELECT CustomerID\n    FROM customers\n    WHERE Segment = 'SME'\n)", "question": "What was the average monthly consumption of customers in SME for the year 2013?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT \n    customers.Segment AS Segment,\n    SUM(yearmonth.Consumption) AS Consumption\nFROM\n    yearmonth\n    JOIN customers ON yearmonth.CustomerID = customers.CustomerID\nWHERE\n    yearmonth.Date LIKE '2012%'\nGROUP BY\n    customers.Segment\nORDER BY\n    Segment", "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT yearmonth.Date, SUM(yearmonth.Consumption)\nFROM yearmonth\nGROUP BY yearmonth.Date\nORDER BY SUM(yearmonth.Consumption) DESC\nLIMIT 1", "question": "Which year recorded the most consumption of gas paid in CZK?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT Date, Consumption\nFROM yearmonth\nWHERE CustomerID IN (\n    SELECT CustomerID\n    FROM customers\n    WHERE Segment = 'SME'\n) AND Date LIKE '2013%'\nORDER BY Consumption DESC", "question": "What was the gas consumption peak month for SME customers in 2013?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT \n    customers.Segment,\n    AVG(yearmonth.Consumption)\nFROM\n    yearmonth\n    JOIN customers ON yearmonth.CustomerID = customers.CustomerID\nWHERE\n    yearmonth.Date LIKE '2013%'\n    AND customers.Currency = 'CZK'\nGROUP BY\n    customers.Segment\nORDER BY\n    AVG(yearmonth.Consumption)", "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT Segment,\n       (SELECT Consumption FROM yearmonth WHERE CustomerID = customers.CustomerID AND Date = '2013-01-01') -\n       (SELECT Consumption FROM yearmonth WHERE CustomerID = customers.CustomerID AND Date = '2012-01-01') AS ConsumptionIncrease,\n       (SELECT Consumption FROM yearmonth WHERE CustomerID = customers.CustomerID AND Date = '20", "question": "Which of the three segments—SME, LAM and KAM—has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT SUM(Amount) FROM transactions_1k WHERE CustomerID = 6 AND Date BETWEEN '2013-08-01' AND '2013-11-30';", "question": "How much did customer 6 consume in total between August and November 2013?"}
{"db_id": "debit_card_specializing", "predict_query": "", "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT \n    COUNT(DISTINCT transactions_1k.CustomerID) AS num_customers,\n    transactions_1k.Currency\nFROM \n    transactions_1k\nWHERE \n    transactions_1k.Currency = 'CZK'\nGROUP BY \n    transactions_1k.Currency\nUNION\nSELECT \n    COUNT(DISTINCT transactions_1k.CustomerID) AS num_customers,", "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT \n    COUNT(CASE WHEN Consumption > 46.73 THEN 1 END) / COUNT(*) * 100\nFROM\n    yearmonth\nWHERE\n    CustomerID IN (\n        SELECT\n            CustomerID\n        FROM\n            customers\n        WHERE\n            Segment = 'LAM'\n    )", "question": "How many percent of LAM customer consumed more than 46.73?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT \n    customers.CustomerID, \n    customers.Segment, \n    customers.Currency, \n    yearmonth.Date, \n    yearmonth.Consumption\nFROM \n    customers, \n    yearmonth\nWHERE \n    customers.CustomerID = yearmonth.CustomerID\n    AND yearmonth.Date = '2012-02-01'\n    AND yearmonth.Consumption > 5", "question": "In February 2012, what percentage of customers consumed more than 528.3?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT \n    Date,\n    Consumption\nFROM\n    yearmonth\nWHERE\n    Date LIKE '2012%'\nORDER BY\n    Consumption DESC\nLIMIT 1", "question": "What is the highest monthly consumption in the year 2012?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT Description\nFROM products\nWHERE ProductID IN (\n    SELECT ProductID\n    FROM transactions_1k\n    WHERE Date BETWEEN '2013-09-01' AND '2013-09-30'\n)", "question": "Please list the product description of the products consumed in September, 2013."}
{"db_id": "debit_card_specializing", "predict_query": "SELECT DISTINCT Country FROM gasstations\nWHERE GasStationID IN (\n    SELECT GasStationID FROM transactions_1k\n    WHERE Date = '2013-06-01'\n)", "question": "Please list the countries of the gas stations with transactions taken place in June, 2013."}
{"db_id": "debit_card_specializing", "predict_query": "SELECT COUNT(DISTINCT customers.CustomerID)\nFROM customers\nJOIN yearmonth\nON customers.CustomerID = yearmonth.CustomerID\nWHERE customers.Currency = 'EUR'\nAND yearmonth.Consumption > 1000;", "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT Description\nFROM products\nWHERE ProductID IN (\n    SELECT ProductID\n    FROM transactions\n    WHERE GasStationID IN (\n        SELECT GasStationID\n        FROM gasstations\n        WHERE Country = 'Czech Republic'\n    )\n)", "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic."}
{"db_id": "debit_card_specializing", "predict_query": "SELECT DISTINCT Time\nFROM transactions_1k\nWHERE GasStationID IN (SELECT GasStationID\n                       FROM gasstations\n                       WHERE ChainID = 11);", "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11."}
{"db_id": "debit_card_specializing", "predict_query": "SELECT SUM(Amount)\nFROM transactions_1k", "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT transactions_1k.Currency\nFROM transactions_1k\nWHERE transactions_1k.Time = '16:25:00' AND transactions_1k.Date = '2012/8/24'", "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT customers.Segment\nFROM customers\nJOIN yearmonth\nON customers.CustomerID = yearmonth.CustomerID\nWHERE yearmonth.Date = '2012/8/23 21:20:00'", "question": "What segment did the customer have at 2012/8/23 21:20:00?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT COUNT(*)\nFROM transactions_1k\nWHERE Date = '2012-08-26' AND Time >= '08:00' AND Time < '09:00' AND GasStationID IN (SELECT GasStationID FROM gas_stations WHERE Country = 'CZE')", "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT customers.Nationality\nFROM customers\nJOIN yearmonth\nON customers.CustomerID = yearmonth.CustomerID\nWHERE yearmonth.Date = '2012/8/24'\nAND yearmonth.Consumption = 548.4", "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT \n    (SELECT COUNT(DISTINCT customers.CustomerID) FROM customers, yearmonth \n    WHERE customers.CustomerID = yearmonth.CustomerID AND yearmonth.Date = '2012/8/25' AND yearmonth.Currency = 'EUR') / \n    (SELECT COUNT(DISTINCT customers.CustomerID) FROM customers, yearmonth \n    WHERE customers.CustomerID = yearmonth.CustomerID AND", "question": "What is the percentage of the customers who used EUR in 2012/8/25?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT yearmonth.Date, yearmonth.Consumption\nFROM yearmonth\nWHERE yearmonth.CustomerID = (SELECT transactions_1k.CustomerID\nFROM transactions_1k\nWHERE transactions_1k.Date = '2012-08-25'\nAND transactions_1k.Amount = 634.8)\nAND yearmonth.Date BETWEEN '2012-01-01' AND '", "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT Segment, COUNT(Segment) AS Count\nFROM yearmonth\nJOIN customers ON yearmonth.CustomerID = customers.CustomerID\nJOIN gasstations ON yearmonth.GasStationID = gasstations.GasStationID\nWHERE Segment = \"premium\" AND Country = \"SVK\"\nGROUP BY Segment", "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT transactions_1k.Amount, yearmonth.Date\nFROM transactions_1k\nJOIN yearmonth\nON transactions_1k.Date = yearmonth.Date\nWHERE transactions_1k.CustomerID = 38508", "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT \n    customers.CustomerID, \n    AVG(transactions_1k.Price) AS avg_price, \n    customers.Currency \nFROM \n    customers \n    JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID \nGROUP BY \n    customers.CustomerID \nORDER BY \n    AVG(transactions_1k.Price) DESC \nLIMIT", "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?"}
{"db_id": "debit_card_specializing", "predict_query": "SELECT yearmonth.Consumption\nFROM yearmonth\nJOIN transactions_1k\nON yearmonth.CustomerID = transactions_1k.CustomerID\nWHERE yearmonth.Date = '2012-08'\nAND transactions_1k.ProductID = 5\nAND transactions_1k.Amount > 29.00", "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012."}
{"db_id": "student_club", "predict_query": "SELECT major_name\nFROM major\nWHERE major_id = (SELECT link_to_major\n                  FROM member\n                  WHERE first_name = 'Angela' AND last_name = 'Sanders');", "question": "What's Angela Sanders's major?"}
{"db_id": "student_club", "predict_query": "SELECT COUNT(*)\nFROM member\nWHERE member.member_id IN (\n    SELECT attendance.link_to_member\n    FROM attendance\n    WHERE attendance.link_to_event = \"Women's Soccer\"\n) AND member.t_shirt_size = \"Medium\";", "question": "Among the students from the Student_Club who attended the event \"Women's Soccer\", how many of them want a T-shirt that's in medium size?"}
{"db_id": "student_club", "predict_query": "SELECT first_", "question": "Among the events attended by more than 10 members of the Student_Club, how many of them are meetings?"}
{"db_id": "student_club", "predict_query": "SELECT event.event_name\nFROM event\nJOIN attendance\nON event.event_id = attendance.link_to_event\nWHERE event.type != 'Fundraiser'\nGROUP BY event.event_name\nHAVING COUNT(attendance.link_to_member) > 20", "question": "List all the names of events that had an attendance of over 20 students but were not fundraisers."}
{"db_id": "student_club", "predict_query": "SELECT SUM(cost)\nFROM expense\nWHERE approved = 'Yes' AND link_to_member = 'President", "question": "What is the amount of the funds that the Vice President received?"}
{"db_id": "student_club", "predict_query": "SELECT first_name || ' ' || last_name\nFROM member\nWHERE zip IN (SELECT zip_code\n              FROM zip_code\n              WHERE state = 'Illinois');", "question": "List the full name of the Student_Club members that grew up in Illinois state."}
{"db_id": "student_club", "predict_query": "SELECT expense.expense_id, expense.expense_description, expense.expense_date, expense.cost, expense.approved\nFROM expense\nWHERE expense.expense_date = 'October 8, 2019'", "question": "Was each expense in October Meeting on October 8, 2019 approved?"}
{"db_id": "student_club", "predict_query": "SELECT AVG(cost)\nFROM expense\nWHERE link_to_member = 'Elijah Allen' AND expense_date BETWEEN '2019-09-01' AND '2019-10-31';", "question": "Calculate the total average cost that Elijah Allen spent in the events on September and October."}
{"db_id": "student_club", "predict_query": "SELECT \n    SUM(spent) AS total_spent_2019,\n    SUM(remaining) AS total_remaining_2019,\n    SUM(amount) AS total_amount_2019,\n    SUM(spent) AS total_spent_2020,\n    SUM(remaining) AS total_remaining_2020,\n    SUM(amount) AS total_", "question": "Calculate the difference of the total amount spent in all events by the Student_Club in year 2019 and 2020."}
{"db_id": "student_club", "predict_query": "SELECT notes\nFROM event\nWHERE event_date = '2019/9/14' AND type = 'fundraising'", "question": "What was the notes of the fundraising on 2019/9/14?"}
{"db_id": "student_club", "predict_query": "SELECT phone\nFROM member\nWHERE first_name = \"Carlo\" AND last_name", "question": "Tell the phone number of \"Carlo Jacobs\"."}
{"db_id": "student_club", "predict_query": "SELECT event.event_name, event.status\nFROM event\nWHERE event.event_date = \"2019/8/20\"\nAND event.type = \"Post Cards, Posters\"", "question": "What is the status of the event which bought \"Post Cards, Posters\" on 2019/8/20?"}
{"db_id": "student_club", "predict_query": "", "question": "What was Brent Thomason's major?"}
{"db_id": "student_club", "predict_query": "SELECT AVG(cost)\nFROM exp", "question": "For all the club members from \"Business\" major, how many of them wear medium size t-shirt?"}
{"db_id": "student_club", "predict_query": "SELECT department\nFROM member\nWHERE member.member_id = (SELECT link_to_member\n                          FROM attendance\n                          WHERE attendance.link_to_event = (SELECT event_id\n                                                           FROM event\n                                                           WHERE event.event_name = 'President'))", "question": "Which department was the President of the club in?"}
{"db_id": "student_club", "predict_query": "SELECT link_to_member\nFROM income\nWHERE date_received", "question": "State the date Connor Hilton paid his/her dues."}
{"db_id": "student_club", "predict_query": "SELECT COUNT(DISTINCT attendance.", "question": "How many times was the budget in Advertisement for \"Yearly Kickoff\" meeting more than \"October Meeting\"?"}
{"db_id": "student_club", "predict_query": "SELECT SUM(cost) FROM expense WHERE link_to_budget = 'pizza';", "question": "What is the total cost of the pizzas for all the events?"}
{"db_id": "student_club", "predict_query": "SELECT city\nFROM zip_code\nWHERE state = 'Virginia' AND county = 'O", "question": "How many cities are there in Orange County, Virginia?"}
{"db_id": "student_club", "predict_query": "SELECT college, COUNT(major_id)", "question": "What does the person with the phone number \"809-555-3360\" major in?"}
{"db_id": "student_club", "predict_query": "SELECT first_name\nFROM attendance\nJOIN member ON attendance.link_to_member = member.member_id\nWHERE", "question": "How many members attended the \"Women's Soccer\" event?"}
{"db_id": "student_club", "predict_query": "SELECT member.member_id, member.first_name, member.last_name, member.email, member.position, member.t_shirt_size, member.phone, member.zip, member.link_to_major\nFROM member\nJOIN major\nON member.link_to_major = major.major_id\nWHERE major.department = \"School of Applied Sciences, Technology and Education\"", "question": "List all the members of the \"School of Applied Sciences, Technology and Education\" department."}
{"db_id": "student_club", "predict_query": "SELECT event.event_id, event.event_name, event.event_date, event.event_status, budget.budget_id, budget.spent, budget.remaining, budget.amount, budget.category\nFROM event\nJOIN budget\nON event.event_id = budget.link_to_event\nWHERE event.event_status = 'closed'\nORDER BY (budget.spent / budget.amount) DESC\nSQL", "question": "Among all the closed events, which event has the highest spend-to-budget ratio?"}
{"db_id": "student_club", "predict_query": "SELECT budget.spent, budget.link_to_event, event.event_name\nFROM budget\nJOIN event\nON budget.link_to_event = event.event_id\nORDER BY budget.spent DESC", "question": "What is the highest amount of budget spend for an event?"}
{"db_id": "student_club", "predict_query": "SELECT SUM(spent) FROM budget WHERE category = 'food' OR category = 'entertainment';", "question": "What is the total amount of money spent for food?"}
{"db_id": "student_club", "predict_query": "SELECT member.member_name\nFROM member\nJOIN attendance ON member.member_id = attendance.link_to_member\nGROUP BY member.member_id\nHAVING COUNT(attendance.link_to_event) > 7", "question": "List the name of students that have attended more than 7 events."}
{"db_id": "student_club", "predict_query": "SELECT link_to_member FROM budget WHERE category = 'Yearly Kickoff' AND event_status = 'Approved'", "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?"}
{"db_id": "student_club", "predict_query": "", "question": "Which event has the lowest cost?"}
{"db_id": "student_club", "predict_query": "SELECT \n    event.event_name, \n    SUM(expense.cost) AS total_cost\nFROM \n    event\n    JOIN expense ON event.event_id = expense.link_to_event\nGROUP BY \n    event.event_name\nORDER BY \n    total_cost DESC;", "question": "Based on the total cost for all event, what is the percentage of cost for Yearly Kickoff event?"}
{"db_id": "student_club", "predict_query": "SELECT source, SUM(amount) AS total_amount\nFROM income\nWHERE date_received LIKE '2019-09%'\nGROUP BY source\nORDER BY total_amount DESC", "question": "Indicate the top source of funds received in September 2019 based on their amount."}
{"db_id": "student_club", "predict_query": "SELECT first_name, last_name, COUNT(*)\nFROM member\nJOIN attendance ON member.member_id = attendance.link_to_member\nGROUP BY member", "question": "How many members of the Student_Club have major in 'Physics Teaching'?"}
{"db_id": "student_club", "predict_query": "SELECT event.event_name, budget.amount\nFROM event\nJOIN budget\nON event.event_id = budget.link_to_event\nWHERE budget.category = 'advertisement'\nORDER BY budget.amount DESC\nLIMIT 1", "question": "Name the event with the highest amount spent on advertisement."}
{"db_id": "student_club", "predict_query": "SELECT member.first_name, member.last_name, member.email, member.position, member.t_shirt_size, member.phone, member.zip, member.link_to_major, event.event_name, event.event_date, event.type, event.notes, event.location, event.status\nFROM member\nJOIN attendance\nON member.member_id = attendance.link_to_member\nJ", "question": "Did Maya Mclean attend the 'Women's Soccer' event?"}
{"db_id": "student_club", "predict_query": "SELECT budget.spent\nFROM budget\nWHERE", "question": "Indicate the cost of posters for 'September Speaker' event."}
{"db_id": "student_club", "predict_query": "SELECT event.event_name, budget.amount, budget.spent, budget.remaining\nFROM event, budget\nWHERE event.event_id = budget.link_to_event\nAND event.event_status = 'closed'\nORDER BY budget.spent DESC", "question": "Indicate the name of the closed event whose cost has exceeded the budget the most."}
{"db_id": "student_club", "predict_query": "SELECT expense.expense_description, SUM(expense.cost)\nFROM expense\nJOIN budget\nON expense.link_to_budget = budget.budget_id\nWHERE budget.link_to_event = 'October Meeting'\nGROUP BY expense.expense_description", "question": "Identify the type of expenses and their total value approved for 'October Meeting' event."}
{"db_id": "student_club", "predict_query": "SELECT budget.category, budget.amount\nFROM budget\nWHERE budget.link_to_event = 'April Speaker'\nORDER BY budget.amount ASC;", "question": "Calculate the amount budgeted for 'April Speaker' event. List all the budgeted categories for said event in an ascending order based on their amount budgeted."}
{"db_id": "student_club", "predict_query": "SELECT SUM", "question": "Mention the total expense used on 8/20/2019."}
{"db_id": "student_club", "predict_query": "SELECT member.first_name || ' ' || member.last_name AS full_name, SUM(expense.cost) AS total_cost\nFROM expense\nJOIN member ON expense.link_to_member = member.member_id\nWHERE member.member_id = 'rec4BLdZHS2Blfp4v'\nGROUP BY member.member_id", "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?"}
{"db_id": "student_club", "predict_query": "SELECT expense_description\nFROM expense\nWHERE link_to_member = 'Sacha Harrison';", "question": "State what kind of expenses that Sacha Harrison incurred?"}
{"db_id": "student_club", "predict_query": "SELECT DISTINCT type FROM event WHERE location = 'MU 215';", "question": "State the category of events were held at MU 215."}
{"db_id": "student_club", "predict_query": "SELECT last_name, department, college\nFROM member\nJOIN major\nON member.link_to_major = major.major_id\nWHERE major.major_name = 'Environmental Engineering'", "question": "List the last name of members with a major in environmental engineering and include its department and college name."}
{"db_id": "student_club", "predict_query": "SELECT budget.category\nFROM budget\nJOIN event\nON budget.link_to_event = event.event_id\nWHERE event.location = 'MU 215'\nAND event.event_type = 'guest speaker'\nAND budget.spent = 0", "question": "What are the budget category of the events located at MU 215 and a guest speaker type with a 0 budget spent?"}
{"db_id": "student_club", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM income WHERE source = 'Student_Club' AND amount = 50) / (SELECT COUNT(*) FROM member WHERE t_shirt_size = 'medium') * 100", "question": "Among the members with t-shirt size of medium, what is the percentage of the amount 50 received by the Student_Club?"}
{"db_id": "student_club", "predict_query": "SELECT event_name\nFROM event\nWHERE type = \"game\" AND event_date BETWEEN \"3/15/2019\" AND \"3/20/2020\" AND status = \"closed\"", "question": "List the names of closed event as \"game\" that was closed from 3/15/2019 to 3/20/2020."}
{"db_id": "student_club", "predict_query": "SELECT member.full_name, member.contact_number, expense.expense_description, expense.cost\nFROM member, expense\nWHERE expense.cost > (SELECT AVG(cost) FROM expense)\nAND member.member_id = expense.link_to_member", "question": "Give the full name and contact number of members who had to spend more than average on each expense."}
{"db_id": "student_club", "predict_query": "SELECT member.first_name || ' ' || member.last_name AS full_name, expense.cost\nFROM expense\nJOIN member ON expense.link_to_member = member.member_id\nWHERE expense.expense_description = 'water' OR expense.expense_description = 'veggie tray' OR expense.expense_description = 'supplies'", "question": "Write the full name of the member who spent money for water, veggie tray and supplies and include the cost of it."}
{"db_id": "student_club", "predict_query": "SELECT member.first_name || ' ' || member.last_name AS full_name, income.amount\nFROM income\nJOIN member\nON income.link_to_member = member.member_id\nWHERE income.date_received = '9/9/2019'", "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT \n    COUNT(DISTINCT Patient.ID) AS Total,\n    Patient.SEX AS Sex,\n    Patient.Admission AS Admission\nFROM \n    Patient\nGROUP BY \n    Patient.SEX,\n    Patient.Admission", "question": "Are there more in-patient or outpatient who were male? What is the deviation in percentage?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM Patient WHERE SEX = 'Female' AND Birthday > '1930-01-01') / (SELECT COUNT(*) FROM Patient) * 100", "question": "What is the percentage of female patient were born after 1930?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM Examination WHERE Diagnosis = 'SLE' AND Admission = 'Outpatient') / \n    (SELECT COUNT(*) FROM Examination WHERE Diagnosis = 'SLE' AND Admission = 'Inpatient')", "question": "What is the ratio of outpatient to inpatient followed up treatment among all the 'SLE' diagnosed patient?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT DISTINCT Diagnosis, Date\nFROM Laboratory\nWHERE ID = 30609;", "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.ID, Patient.SEX, Patient.Birthday\nFROM Patient\nJOIN Laboratory\nON Patient.ID = Laboratory.ID\nWHERE Laboratory.LDH > 1000", "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.ID, Patient.Birthday, Examination.aCL IgG, Examination.aCL IgM, Examination.ANA, Examination.ANA Pattern, Examination.aCL IgA, Examination.Thrombosis\nFROM Patient, Examination\nWHERE Patient.ID = Examination.ID AND (Examination.aCL IgG > 0 OR Exam", "question": "State the ID and age of patient with positive degree of coagulation."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.ID, Patient.SEX, Examination.Diagnosis\nFROM Patient, Examination\nWHERE Patient.ID = Examination.ID AND Examination.Thrombosis = 3", "question": "For patients with severe degree of thrombosis, list their ID, sex and disease the patient is diagnosed with."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*)\nFROM Patient\nWHERE SEX = 'Female' AND First Date BETWEEN '1997-01-01' AND '1997-12-31' AND Admission = 'Outpatient clinic';", "question": "How many female patients who came at the hospital in 1997 was immediately followed at the outpatient clinic?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*)\nFROM Examination\nWHERE Thrombosis = 1\nAND Examination Date BETWEEN '1997-01-01' AND '1997-12-31'\nAND ID IN (\n    SELECT ID\n    FROM Patient\n    WHERE SEX = 'F'\n)", "question": "How many of the patients with the most serious thrombosis cases examined in 1997 are women?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Symptoms, Diagnosis\nFROM Examination\nWHERE ID = (SELECT ID\n            FROM Patient\n            ORDER BY Birthday DESC\n            LIMIT 1);", "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Laboratory.Date, Patient.Birthday, Patient.ID\nFROM Laboratory\nJOIN Patient\nON Laboratory.ID = Patient.ID\nORDER BY Laboratory.Date", "question": "The oldest SJS patient's medical laboratory work was completed on what date, and what age was the patient when they initially arrived at the hospital?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT \n    SUM(CASE WHEN Patient.SEX = 'Male' THEN 1 ELSE 0 END) / SUM(CASE WHEN Patient.SEX = 'Female' THEN 1 ELSE 0 END) AS Ratio\nFROM \n    Patient\n    JOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE \n    Laboratory.U-PRO = 'Abnormal'", "question": "What is the ratio of male to female patients among all those with abnormal uric acid counts?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT AVG(Birthday)\nFROM Patient", "question": "How many underage patients were examined during the course of the three-year period from 1990 to 1993?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.ID, Patient.Birthday, Laboratory.HGB, Patient.Diagnosis\nFROM Patient, Laboratory\nWHERE Patient.ID = Laboratory.ID\nORDER BY Laboratory.HGB DESC\nLIMIT 1", "question": "How old was the patient who had the highest hemoglobin count at the time of the examination, and what is the doctor's diagnosis?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT\n    Laboratory.ID,\n    Laboratory.Date,\n    Laboratory.IGG\nFROM\n    Laboratory\n    JOIN Patient ON Laboratory.ID = Patient.ID\n    JOIN Examination ON Laboratory.ID = Examination.ID\nWHERE\n    Patient.Diagnosis = 'SLE'\n    AND Examination.Diagnosis = 'SLE'\n    AND Examination.Exam", "question": "For the patient who was diagnosed with SLE on 1994/2/19, what was his/her anti-Cardiolipin antibody concentration status on 1993/11/12?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT \n    L1.T-CHO AS November, \n    L2.T-CHO AS December\nFROM \n    Laboratory L1, \n    Laboratory L2\nWHERE \n    L1.ID = 1 AND \n    L2.ID = 1 AND \n    L1.Date = '1981-11-01' AND \n    L2.Date = '19", "question": "For the patient who was born on 1959/2/18, what is the decrease rate for his/her total cholesterol from November to December in 1981?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.ID\nFROM Patient\nJOIN Laboratory\nON Patient.ID = Laboratory.ID\nWHERE Laboratory.GPT > 30 AND Laboratory.ALB < 4\nAND Laboratory.Date BETWEEN '1987-07-06' AND '1996-01-31'", "question": "How many patients who were examined between 1987/7/6 and 1996/1/31 had a GPT level greater than 30 and an ALB level less than 4? List them by their ID."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*)\nFROM Examination\nWHERE Thrombosis = 2 AND ANA = 1 AND ANA Pattern = 'S' AND aCL IgM > (SELECT AVG(aCL IgM) FROM Examination);", "question": "What number of patients with a degree of thrombosis level 2 and ANA pattern of only S, have a level of anti-Cardiolip in antibody (IgM) 20% higher than average?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Patient.Description, Patient.First Date, Patient.Admission, Patient.Diagnosis, Laboratory.Date, Laboratory.GOT, Laboratory.GPT, Laboratory.LDH, Laboratory.ALP, Laboratory.TP, Laboratory.ALB, Laboratory.UA, Laboratory.UN, Laboratory.CRE,", "question": "List all patients who were followed up at the outpatient clinic who underwent a laboratory test in October 1991 and had a total blood bilirubin level within the normal range."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT AVG(ALB)\nFROM Laboratory\nJOIN Patient ON Laboratory.ID = Patient.ID\nJOIN Examination ON Laboratory.ID = Examination.ID\nWHERE Patient.SEX = 'F' AND Laboratory.PLT > 400 AND Examination.Diagnosis = 'SLE';", "question": "What is the average blood albumin level for female patients with a PLT greater than 400 who have been diagnosed with SLE?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT AVG(Birthday)\nFROM Patient\nWHERE Diagnosis = 'APS';", "question": "How many female patients were given an APS diagnosis?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT \n    COUNT(Patient.ID) / (SELECT COUNT(Patient.ID) FROM Patient WHERE Patient.Birthday LIKE '1980%') * 100\nFROM \n    Patient\n    JOIN Examination ON Patient.ID = Examination.ID\nWHERE \n    Examination.Diagnosis = 'RA'", "question": "What percentage of patients who were born in 1980 and were diagnosed with RA are women?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT UA\nFROM Laboratory\nWHERE ID = 57266", "question": "Was the patient with the number 57266's uric acid within a normal range?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.ID\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nWHERE Laboratory.GPT > 40 AND Patient.SEX = 'Male';", "question": "Provide IDs for male patients with ALT glutamic pylvic transaminase (GPT) that have history of ALT glutamic pylvic transaminase (GPT) exceed the normal range."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.Birthday, Diagnosis\nFROM Patient, Laboratory\nWHERE Patient.ID = Laboratory.ID AND Laboratory.ALT > 100\nORDER BY Patient.Birthday ASC;", "question": "Please provide the diagnosis of patients with ALT glutamic pylvic transaminase beyond the normal range by ascending order of their date of birth."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.ID, Patient.SEX, Patient.Birthday\nFROM Patient\nJOIN Laboratory\nON Patient.ID = Laboratory.ID\nWHERE Laboratory.UN = 1", "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.SEX, Laboratory.T-BIL\nFROM Patient, Laboratory\nWHERE Patient.ID = Laboratory.ID\nAND Laboratory.T-BIL NOT BETWEEN 0.1 AND 1.2\nGROUP BY Patient.SEX", "question": "List and group all patients by sex for total bilirubin (T-BIL) level not within the normal range."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT AVG(Birthday)\nFROM", "question": "What is the average age of the male patient with high cholesterol?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*)\nFROM Laboratory\nWHERE TG > 150\nAND ID IN (\n    SELECT ID\n    FROM Patient\n    WHERE Birthday < date('now', '-50 year')\n)", "question": "For all patients with triglyceride (TG) level beyond the normal range, how many are age more than 50 years?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*)\nFROM Patient\nWHERE Birthday BETWEEN '1936-01-01' AND '1956-12-31' AND Sex = 'Male' AND CPK > 1000", "question": "For patient born between 1936-1956, how many male patients have creatinine phosphokinase beyond the normal range?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.ID, Patient.SEX, Patient.Birthday, Laboratory.GLU, Laboratory.T-CHO\nFROM Patient, Laboratory\nWHERE Patient.ID = Laboratory.ID AND Laboratory.GLU NOT IN (1, 2, 3, 4, 5) AND Laboratory.T-CHO IN (1, 2, 3, 4, 5)\nSQL", "question": "Provide ID, sex and age of patient who has blood glucose (GLU) not within normal range but with total cholesterol(T-CHO) within normal range."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.ID, Patient.Birthday, Laboratory.HGB\nFROM Patient, Laboratory\nWHERE Patient.ID = Laboratory.ID AND Laboratory.HGB < 120", "question": "What are the patient's diagnosis for those who has lower red blood blood cell? State their ID and age."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.ID, Patient.SEX\nFROM Patient\nJOIN Laboratory ON Patient.ID = Laboratory.ID\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Laboratory.HGB = 'Normal' AND Examination.Diagnosis = 'SLE'\nORDER BY Patient.Birthday DESC\nLIMIT 1", "question": "Among the patients who were diagnosed with SLE, who is the oldest with normal hemoglobin level. Provide the ID and sex."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.ID, Patient.Birthday, Laboratory.HGB\nFROM Patient, Laboratory\nWHERE Patient.ID = Laboratory.ID\nAND Laboratory.HGB > 150\nORDER BY Patient.ID;", "question": "Name the ID and age of patient with two or more laboratory examinations which show their hematoclit level exceeded the normal range."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*) FROM Laboratory WHERE PLT < 150", "question": "For patients with abnormal platelet level, state the number of patients with lower than normal range. How is it compare to the number of patients with higher than normal range?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Patient.ID, Patient.Birthday, Laboratory.ID, Laboratory.PLT\nFROM Patient, Laboratory\nWHERE Patient.ID = Laboratory.ID\nAND Laboratory.Date = '1984-01-01'\nAND Patient.Birthday > '1934-01-01'\nAND Laboratory.PLT = 'normal';", "question": "For laboratory examinations take in 1984, list all patients below 50 years old with normal platelet level."}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT \n    COUNT(Laboratory.ID) / COUNT(Patient.ID) * 100 AS percentage\nFROM \n    Patient\n    JOIN Laboratory ON Laboratory.ID = Patient.ID\nWHERE \n    Patient.Birthday < date('now', '-55 year')\n    AND Laboratory.PT = 'Abnormal'\n    AND Patient.SEX = 'Female'\nSQLResult", "question": "For all patients who are older than 55 years old, what is the percentage of female who has abnormal prothrombin time (PT)?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(Laboratory.ID)\nFROM Laboratory\nJOIN Patient ON Laboratory.ID = Patient.ID\nWHERE Patient.SEX = 'Male' AND Laboratory.WBC = 'Normal' AND Laboratory.Fibrinogen = 'Abnormal'", "question": "Among the male patients who have a normal level of white blood cells, how many of them have an abnormal fibrinogen level?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*)\nFROM Examination\nWHERE aCL_IgG > 0 AND aCL_IgM > 0;", "question": "How many patients with an Ig G higher than normal?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*)\nFROM Examination\nWHERE aCL_IgG = 0", "question": "Among the patients with a normal Ig G level, how many of them have symptoms?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*)\nFROM Patient\nJOIN Examination ON Patient.ID = Examination.ID\nWHERE Examination.aCL IgA = 0 AND Examination.Examination Date > '1990/1/1'", "question": "How many patients with a normal Ig A level came to the hospital after 1990/1/1?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT Diagnosis, COUNT(Diagnosis) AS Count\nFROM Examination\nWHERE aCL IgM > 0\nGROUP BY Diagnosis\nORDER BY Count DESC", "question": "For the patients with an abnormal Ig M level, what is the most common disease they are diagnosed with?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*)\nFROM Laboratory\nWHERE CRE <> 'normal'", "question": "How many patients with a abnormal C-reactive protein don't have their data recorded?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*)", "question": "Among the patients whose creatinine level is abnormal, how many of them aren't 70 yet?"}
{"db_id": "thrombosis_prediction", "predict_query": "", "question": "How many patients have a normal level of anti-ribonuclear protein and have been admitted to the hospital?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*)\nFROM Patient\nWHERE Diagnosis = 'Positive'", "question": "Among the patients with normal anti-SM, how many of them does not have thrombosis?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*)\nFROM Patient\nWHERE ID IN (\n    SELECT ID\n    FROM Examination\n    WHERE aCL IgG = 0\n)\nAND SEX = 'Female'\nAND Symptoms = 'None'", "question": "Among the patients who has a normal anti-scl70, how many of them are female and does not have any symptom?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*)\nFROM Patient\nWHERE ID IN (\n    SELECT ID\n    FROM Examination\n    WHERE Diagnosis = 'Normal'\n    AND aCL IgG = 0\n    AND aCL IgM = 0\n    AND aCL IgA = 0\n    AND ANA = 0\n    AND ANA Pattern = 'Negative'\n    AND KCT = 'Negative'\n    AND RVV", "question": "Among the patients who has a normal level of anti-centromere and a normal level of anti-SSB, how many of them are male?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT MIN(Birthday)\nFROM Patient\nWHERE ID IN (\n    SELECT ID\n    FROM Laboratory\n    WHERE TG = 1\n)", "question": "Among the patients who have an abnormal level of glutamic oxaloacetic transaminase, when was the youngest of them born?"}
{"db_id": "thrombosis_prediction", "predict_query": "SELECT COUNT(*)\nFROM Laboratory\nWHERE CRE = 'Normal'\nAND (TP = 'Positive' OR T-BIL = 'Positive' OR T-CHO = 'Positive' OR TG = 'Positive' OR CPK = 'Positive' OR GLU = 'Positive' OR WBC = 'Positive' OR RBC = 'Positive' OR HGB = 'Positive' OR HCT = 'Positive", "question": "For the patients with a normal range of creatinine phosphokinase, how many of them have a positive measure of degree of coagulation?"}
{"db_id": "european_football_2", "predict_query": "SELECT Player.name FROM Player JOIN Player_Attributes ON Player", "question": "Give the name of the league had the most goals in the 2016 season?"}
{"db_id": "european_football_2", "predict_query": "SELECT away_team_api_id, COUNT(away_team_api_id) AS count\nFROM Match\nWHERE league_id = (SELECT id FROM League WHERE name = 'Scottish Premier League') AND season = '2010'\nGROUP BY away_team_api_id\nORDER BY count DESC", "question": "In Scotland Premier League, which away team won the most during the 2010 season?"}
{"db_id": "european_football_2", "predict_query": "SELECT Team_Attributes.buildUpPlaySpeed, Team.team_long_name\nFROM Team_Attributes\nJOIN Team\nON Team_Attributes.team_api_id = Team.team_api_id\nORDER BY buildUpPlaySpeed DESC\nLIMIT 4", "question": "What are the speed in which attacks are put together of the top 4 teams with the highest build Up Play Speed?"}
{"db_id": "european_football_2", "predict_query": "SELECT name\nFROM League\nWHERE id IN (\n    SELECT league_id\n    FROM Match\n    WHERE season = '2016'\n    GROUP BY league_id\n    ORDER BY COUNT(CASE WHEN home_team_goal = away_team_goal THEN 1 END) DESC\n    LIMIT 1\n)", "question": "Give the name of the league had the most matches end as draw in the 2016 season?"}
{"db_id": "european_football_2", "predict_query": "SELECT Player.player_name, Player.birthday, Player_Attributes.sprint_speed\nFROM Player_Attributes\nJOIN Player ON Player_Attributes.player_api_id = Player.player_api_id\nWHERE Player_Attributes.sprint_speed >= 97\nAND Player_Attributes.date BETWEEN '2013-01-01' AND '2015-12-31'", "question": "At present, calculate for the player's age who have a sprint speed of no less than 97 between 2013 to 2015."}
{"db_id": "european_football_2", "predict_query": "SELECT League.name, COUNT(Match.id)\nFROM League\nJOIN Match\nON League.id = Match.league_id\nGROUP BY League.name\nORDER BY COUNT(Match.id) DESC\nLIMIT 1", "question": "Give the name of the league with the highest matches of all time and how many matches were played in the said league."}
{"db_id": "european_football_2", "predict_query": "SELECT Team_Attributes.team_fifa_api_id\nFROM Team_Attributes\nWHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60;", "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed."}
{"db_id": "european_football_2", "predict_query": "SELECT Team.long_name, Team_Attributes.buildUpPlayPassing\nFROM Team_Attributes\nJOIN Team\nON Team_Attributes.team_api_id = Team.team_api_id\nWHERE Team_Attributes.buildUpPlayPassing > 50\nAND Team_Attributes.date = '2012'", "question": "List the long name of teams with above-average build-up play passing in 2012."}
{"db_id": "european_football_2", "predict_query": "SELECT preferred_foot, COUNT(preferred_foot) AS count\nFROM Player_Attributes\nWHERE preferred_foot = 'Left' AND birthday BETWEEN '1987-01-01' AND '1992-12-31'", "question": "Calculate the percentage of players who prefer left foot, who were born between 1987 and 1992."}
{"db_id": "european_football_2", "predict_query": "SELECT AVG(long_shots)\nFROM Player_Attributes\nWHERE player_api_id = 1000000000000000000000000000000000000000000000000000000000000000000000000000", "question": "Find the average number of long-shot done by Ahmed Samir Farag."}
{"db_id": "european_football_2", "predict_query": "SELECT player_name, AVG(heading_accuracy) as avg_heading_accuracy\nFROM Player_Attributes\nJOIN Player ON Player_Attributes.player_api_id = Player.player_api_id\nWHERE height > 180\nGROUP BY player_name\nORDER BY avg_heading_accuracy DESC\nLIMIT 10;", "question": "List the top 10 players' names whose heights are above 180 in descending order of average heading accuracy."}
{"db_id": "european_football_2", "predict_query": "SELECT League.name\nFROM League\nJOIN Match ON League.id = Match.league_id\nWHERE Match.season = '2009/2010'\nGROUP BY League.name\nHAVING AVG(home_team_goal) > AVG(away_team_goal)", "question": "List the name of leagues in which the average goals by the home team is higher than the away team in the 2009/2010 season."}
{"db_id": "european_football_2", "predict_query": "SELECT player_name, birthday\nFROM Player\nWHERE birthday LIKE '1970-10-%'", "question": "List the football players with a birthyear of 1970 and a birthmonth of October."}
{"db_id": "european_football_2", "predict_query": "SELECT overall_rating\nFROM Player_Attributes\nWHERE player_fifa_api_id = 100000000000000000000000000000000000000000000000000000000000000000000000000000", "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?"}
{"db_id": "european_football_2", "predict_query": "SELECT AVG(home_team_goal)\nFROM Match\nWHERE season = '2010/2011'\nAND country_id = (SELECT id\n                 FROM Country\n                 WHERE name = 'Poland')", "question": "Calculate the average home team goal in the 2010/2011 season in the country of Poland."}
{"db_id": "european_football_2", "predict_query": "SELECT AVG(finishing) as avg_finishing, height\nFROM Player_Attributes\nGROUP BY height\nORDER BY avg_finishing DESC", "question": "Who has the highest average finishing rate between the highest and shortest football player?"}
{"db_id": "european_football_2", "predict_query": "SELECT AVG(overall_rating)\nFROM Player_Attributes\nWHERE overall_rating > 170\nAND date BETWEEN '2010-01-01' AND '2015-12-31'", "question": "From 2010 to 2015, what was the average overall rating of players who are higher than 170?"}
{"db_id": "european_football_2", "predict_query": "SELECT AVG(ball_control) FROM Player_Attributes WHERE player_api_id = 1000000000000000000000000000000000000000000000000000000000000000000000000000000", "question": "What is the difference of the average ball control score between Abdou Diallo and Aaron Appindangoye\n?"}
{"db_id": "european_football_2", "predict_query": "SELECT \n    Player.name, \n    Player_Attributes.date \nFROM \n    Player \n    JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id \nWHERE \n    Player.name = 'Aaron Lennon' OR Player.name = 'Abdelaziz Barrada' \nORDER BY \n    Player_Attributes.date", "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?"}
{"db_id": "european_football_2", "predict_query": "SELECT player_name, potential\nFROM Player_Attributes\nORDER BY potential DESC\nLIMIT 1", "question": "Which player is the tallest?"}
{"db_id": "european_football_2", "predict_query": "SELECT COUNT(DISTINCT(Player_Attributes.player_api_id))\nFROM Player_Attributes\nJOIN Player ON Player_Attributes.player_api_id = Player.player_api_id\nWHERE Player_Attributes.preferred_foot = 'left'\nAND Player.position IN (\n    SELECT position\n    FROM Player\n    WHERE position IN (\n        SELECT position\n        FROM Player_Attributes\n        WHERE preferred_foot = 'left'", "question": "Among the players whose preferred foot was the left foot when attacking, how many of them would remain in his position when the team attacked?"}
{"db_id": "european_football_2", "predict_query": "SELECT COUNT(DISTINCT(Player_Attributes.player_api_id))\nFROM Player_Attributes\nJOIN Player ON Player_Attributes.player_api_id = Player.player_api_id\nWHERE Player.birthday < '1986-01-01'\nAND Player_Attributes.defensive_work_rate = 'High'\nAND Player_Attributes.attacking_work_rate = 'Low'", "question": "Among the players born before the year 1986, how many of them would remain in his position and defense while the team attacked?"}
{"db_id": "european_football_2", "predict_query": "SELECT player_name\nFROM Player\nWHERE volley > 70 AND dribbling > 70;", "question": "Please list the names of the players whose volley score and dribbling score are over 70."}
{"db_id": "european_football_2", "predict_query": "SELECT Player.player_name, SUM(home", "question": "How many matches were held in the Belgium Jupiler League in April, 2009?"}
{"db_id": "european_football_2", "predict_query": "SELECT name\nFROM League\nWHERE id IN (\n    SELECT league_id\n    FROM Match\n    WHERE season = '2008/2009'\n    GROUP BY league_id\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n)", "question": "Give the name of the league had the most matches in the 2008/2009 season?"}
{"db_id": "european_football_2", "predict_query": "SELECT\n    Player_Attributes.overall_rating AS Ariel_Borysiuk_overall_rating,\n    Player_Attributes.overall_rating - (SELECT Player_Attributes.overall_rating FROM Player_Attributes WHERE Player_Attributes.player_api_id = 160018) AS difference\nFROM\n    Player_Attributes\nWHERE\n    Player_Attributes.player_api_id = 160017", "question": "How much higher in percentage is Ariel Borysiuk's overall rating than that of Paulin Puel?"}
{"db_id": "european_football_2", "predict_query": "SELECT AVG(potential)\nFROM Player_Attributes\nWHERE birthday", "question": "Calculate the average overall rating of Pietro Marino."}
{"db_id": "european_football_2", "predict_query": "SELECT \n    Team_Attributes.buildUpPlayPassing,\n    Team_Attributes.buildUpPlayPassingClass\nFROM \n    Team_Attributes\n    JOIN Team ON Team_Attributes.team_api_id = Team.team_api_id\nWHERE \n    Team.name = 'Ajax'\nORDER BY \n    Team_Attributes.buildUpPlayPassing DESC", "question": "What is Ajax's highest chance creation passing score and what is it classified as?"}
{"db_id": "european_football_2", "predict_query": "SELECT Player.player_name\nFROM Player\nJOIN Player_Attributes\nON Player.player_api_id = Player_Attributes.player_api_id\nWHERE Player_Attributes.overall_rating = 77\nAND Player_Attributes.date = '2016/6/23'\nORDER BY Player.birthday", "question": "For the players who had a 77 points overall rating on 2016/6/23, who was the oldest? Give the name of the player."}
{"db_id": "european_football_2", "predict_query": "SELECT\n    Player_Attributes.overall_rating\nFROM\n    Player_Attributes\n    JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id\nWHERE\n    Player.player_name = 'Aaron Mooy'\n    AND Player_Attributes.date = '2016/2/4'", "question": "What was the overall rating for Aaron Mooy on 2016/2/4?"}
{"db_id": "european_football_2", "predict_query": "SELECT attacking_work_rate\nFROM Player_Attributes\nWHERE player_api_id = 100000000000000000000000000000000000000000000000000000000000000000000000000000", "question": "How was Francesco Migliore's attacking work rate on 2015/5/1?"}
{"db_id": "european_football_2", "predict_query": "SELECT date\nFROM Player_Attributes\nWHERE player_api_id = (SELECT player_api_id\n                       FROM Player\n                       WHERE player_name = 'Kevin Constant')\nORDER BY crossing DESC\nLIMIT 1", "question": "When was the first time did Kevin Constant have his highest crossing score? Give the date."}
{"db_id": "european_football_2", "predict_query": "SELECT buildUpPlayPassingClass\nFROM Team_Attributes\nWHERE team_api_id = (SELECT team_api_id\n                     FROM Team\n                     WHERE team_name = \"FC Lorient\")\n  AND date = \"2010/2/22\"", "question": "Tell the build Up play passing class for \"FC Lorient\" on 2010/2/22."}
{"db_id": "european_football_2", "predict_query": "SELECT \n    Player_Attributes.defence_aggression_class\nFROM \n    Player_Attributes\n    JOIN Match ON Match.home_team_api_id = Player_Attributes.team_api_id\n    JOIN Team ON Team.team_api_id = Player_Attributes.team_api_id\nWHERE \n    Team.team_long_name = \"Hannover 96\"\n    AND Match.date = \"2", "question": "For the team \"Hannover 96\", what was its defence aggression class on 2015/9/10?"}
{"db_id": "european_football_2", "predict_query": "SELECT AVG(overall_rating)\nFROM Player_Attributes\nWHERE player_fifa_api_id = (SELECT player_fifa_api_id\n                            FROM Player\n                            WHERE player_name = 'Marko Arnautovic')\n  AND date BETWEEN '2007/2/22' AND '2016/4/21'", "question": "What was the average overall rating for Marko Arnautovic from 2007/2/22 to 2016/4/21?"}
{"db_id": "european_football_2", "predict_query": "SELECT\n    (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = 1000000001 AND date = '2013/7/12') AS Donovan,\n    (SELECT overall_rating FROM Player_Attributes WHERE player_api_id = 1000000002 AND date = '2013/7/12') AS Bowery", "question": "What percentage is Landon Donovan's overall rating higher than Jordan Bowery on 2013/7/12?"}
{"db_id": "european_football_2", "predict_query": "SELECT player_name, height\nFROM Player\nORDER BY height DESC\nLIMIT 5;", "question": "List down most tallest players' name."}
{"db_id": "european_football_2", "predict_query": "SELECT player_name\nFROM Player\nWHERE player_api_id = (\n    SELECT player_api_id\n    FROM Player_Attributes\n    WHERE strength = (\n        SELECT MAX(strength)\n        FROM Player_Attributes\n    )\n)", "question": "State the name of the most strongest player."}
{"db_id": "european_football_2", "predict_query": "SELECT Player.player_name\nFROM Player\nJOIN Match ON Match.home_player_1 = Player.player_api_id OR Match.home_player_2 = Player.player_api_id OR Match.home_player_3 = Player.player_api_id OR Match.home_player_4 = Player.player_api_id OR Match.home_player_5 = Player.player_api_id OR Match.home_player", "question": "Who are the players that tend to be attacking when their mates were doing attack moves? List down their name."}
{"db_id": "european_football_2", "predict_query": "SELECT Team.team_short_name\nFROM Team\nJOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id\nWHERE Team_Attributes.chanceCreationPassingClass = 'safe'", "question": "What are the short name of team who played safe while creating chance of passing?"}
{"db_id": "european_football_2", "predict_query": "SELECT COUNT(*)\nFROM Player\nWHERE player_name LIKE 'Aaron%'", "question": "How many football players born after the 1990s have the first name \"Aaron\"?"}
{"db_id": "european_football_2", "predict_query": "SELECT jumping FROM Player_Attributes WHERE player_api_id =", "question": "What is the difference between players 6 and 23's jumping scores?"}
{"db_id": "european_football_2", "predict_query": "SELECT Player.player_api_id, Player.player_name, Player_Attributes.potential\nFROM Player\nJOIN Player_Attributes\nON Player.player_api_id = Player_Attributes.player_api_id\nWHERE Player_Attributes.preferred_foot = 'Right'\nORDER BY Player_Attributes.potential ASC\nLIMIT 4;", "question": "Please provide top four football players' IDs who are among the lowest potential players and prefer to use the right foot when attacking."}
{"db_id": "european_football_2", "predict_query": "SELECT COUNT(*)\nFROM Player_Attributes\nWHERE crossing = (SELECT MAX(cross", "question": "How many players had the highest potential score for crossing that preferred to use their left foots while attacking?"}
{"db_id": "european_football_2", "predict_query": "SELECT Match.date, Match.home_team_api_id, Match.away_team_api_id, Match.home_team_goal, Match.away_team_goal\nFROM Match\nWHERE Match.date = '2008-09-24' AND Match.league_id = 1", "question": "What was the final score for the match on September 24, 2008, in the Belgian Jupiler League between the home team and the away team?"}
{"db_id": "european_football_2", "predict_query": "SELECT buildUpPlaySpeedClass\nFROM Team_Attributes\nWHERE team_api_id = 1000000000000000000000000000000000000000000000000000000000000000000000000000000", "question": "Does the KSV Cercle Brugge team have a slow, balanced or fast speed class?"}
{"db_id": "european_football_2", "predict_query": "SELECT finishing, curve\nFROM Player_Attributes\nWHERE player_api_id = (SELECT player_api_id\nFROM Player\nWHERE weight = (SELECT MAX(weight)\nFROM Player));", "question": "Please state the finishing rate and curve score of the player who has the heaviest weight."}
{"db_id": "european_football_2", "predict_query": "SELECT League.name, COUNT(Match.id) as num_of_games\nFROM League\nJOIN Match ON League.id = Match.league_id\nWHERE Match.season = '2015-2016'\nGROUP BY League.name\nORDER BY num_of_games DESC\nLIMIT 4", "question": "Which top 4 leagues had the most games in the 2015-2016 season?"}
{"db_id": "european_football_2", "predict_query": "SELECT Team.team_long_name, SUM(Match.away_team_goal)\nFROM Match\nJOIN Team ON Match.away_team_api_id = Team.team_api_id\nGROUP BY Team.team_long_name\nORDER BY SUM(Match.away_team_goal) DESC\nLIMIT 1", "question": "Please provide the full name of the away team that scored the most goals."}
{"db_id": "european_football_2", "predict_query": "SELECT player_name, potential\nFROM Player_Attributes\nORDER BY potential DESC\nLIMIT 1", "question": "Please name one player whose overall strength is the greatest."}
{"db_id": "european_football_2", "predict_query": "SELECT COUNT(Player_Attributes.player_api_id) / COUNT(Player.player_api_id) * 100\nFROM Player_Attributes\nJOIN Player\nON Player_Attributes.player_api_id = Player.player_api_id\nWHERE Player_Attributes.overall_rating > 70\nAND Player.height < 180", "question": "What is the percentage of players that are under 180 cm who have an overall strength of more than 70?"}
{"db_id": "formula_1", "predict_query": "SELECT DISTINCT drivers.driverRef\nFROM pitStops\nJOIN races ON races.raceId = pitStops.raceId\nJOIN drivers ON drivers.driverId = pitStops.driverId\nWHERE races.raceId = 20 AND pitStops.stop = 1", "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20."}
{"db_id": "formula_1", "predict_query": "SELECT lapTimes.driverId, drivers.surname, lapTimes.time\nFROM lapTimes\nJOIN drivers ON lapTimes.driverId = drivers.driverId\nWHERE lapTimes.raceId = 19 AND lapTimes.position = 1", "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?"}
{"db_id": "formula_1", "predict_query": "SELECT races.name\nFROM races\nJOIN circuits\nON races.circuitId = circuits.circuitId\nWHERE circuits.country = 'Germany'", "question": "Please give the name of the race held on the circuits in Germany."}
{"db_id": "formula_1", "predict_query": "SELECT circuits.lat, circuits.lng\nFROM circuits\nJOIN races\nON races.circuitId = circuits.circuitId\nWHERE races.name = 'Australian Grand Prix';", "question": "What is the coordinates location of the circuits for Australian grand prix?"}
{"db_id": "formula_1", "predict_query": "SELECT name\nFROM drivers\nWHERE driverId = (\n    SELECT driverId\n    FROM driverStandings\n    WHERE wins = (\n        SELECT MAX(wins)\n        FROM driverStandings", "question": "Give the coordinate position for Abu Dhabi Grand Prix."}
{"db_id": "formula_1", "predict_query": "SELECT q1\nFROM qualifying\nWHERE driverId = (SELECT driverId\n                  FROM drivers\n                  WHERE driverRef = 'senna')\n  AND raceId = (SELECT raceId\n                FROM races\n                WHERE raceId = 354)", "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?"}
{"db_id": "formula_1", "predict_query": "SELECT drivers.name\nFROM qualifying\nJOIN drivers", "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?"}
{"db_id": "formula_1", "predict_query": "SELECT drivers.driverId, drivers.forename,", "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?"}
{"db_id": "formula_1", "predict_query": "SELECT \n    drivers.driverId,\n    drivers.driverRef,\n    drivers.number,\n    drivers.code,\n    drivers.forename,\n    drivers.surname,\n    drivers.dob,\n    drivers.nationality,\n    drivers.url\nFROM \n    drivers\n    JOIN driverStandings ON drivers.driverId = driverStandings.driverId\nWHERE \n    driverStandings.raceId = 5", "question": "For all the drivers who finished the game in race No. 592, who is the oldest?"}
{"db_id": "formula_1", "predict_query": "SELECT \n    pitStops.driverId, \n    drivers.url\nFROM \n    pitStops\n    JOIN drivers ON pitStops.driverId = drivers.driverId\nWHERE \n    pitStops.raceId = 161\n    AND pitStops.time = '0:01:27'", "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website."}
{"db_id": "formula_1", "predict_query": "SELECT drivers", "question": "Where is Malaysian Grand Prix held? Give the location coordinates."}
{"db_id": "formula_1", "predict_query": "SELECT constructors.url\nFROM constructors\nJOIN constructorStandings ON constructors.constructorId = constructorStandings.constructorId\nWHERE constructorStandings.raceId = 9\nORDER BY constructorStandings.points DESC\nLIMIT 1", "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?"}
{"db_id": "formula_1", "predict_query": "SELECT drivers.abbreviation\nFROM drivers\nJOIN lapTimes\nON lapTimes.driverId = drivers.driverId\nWHERE lapTimes.raceId = 45\nAND lapTimes.time = '0:01:33'", "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?"}
{"db_id": "formula_1", "predict_query": "SELECT races.url\nFROM races\nWHERE", "question": "Show me the season page of year when the race No. 901 took place."}
{"db_id": "formula_1", "predict_query": "SELECT \n    MIN(drivers.birthDate) AS youngest,\n    drivers.driverId,\n    drivers.forename,\n    drivers.surname\nFROM\n    drivers\n        JOIN\n    driverStandings ON drivers.driverId = driverStandings.driverId\n        JOIN\n    races ON driverStandings.raceId = races.raceId\nWHERE\n    races.raceId = 872\nGROUP BY drivers.", "question": "For all the drivers who finished the game in race No. 872, who is the youngest?"}
{"db_id": "formula_1", "predict_query": "SELECT name\nFROM drivers\nWHERE driverId = (\n    SELECT driverId\n    FROM driverStandings", "question": "For the driver who set the fastest lap speed, what is his nationality?"}
{"db_id": "formula_1", "predict_query": "SELECT \n    (\n        SELECT \n            (\n                SELECT \n                    time\n                FROM \n                    lapTimes\n                WHERE \n                    raceId = 853\n                    AND driverId = (\n                        SELECT \n                            driverId\n                        FROM \n                            pitStops\n                        WHERE \n                            raceId = 853\n                        LIMIT 1\n                    )", "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?"}
{"db_id": "formula_1", "predict_query": "SELECT \n    d.driverId, \n    d.forename, \n    d.surname, \n    COUNT(DISTINCT r.raceId) / COUNT(DISTINCT r.raceId) AS completion_rate\nFROM \n    drivers d\n    JOIN races r ON d.driverId = r.driverId\nWHERE \n    r.date = '1983-07-16'\nGROUP BY", "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?"}
{"db_id": "formula_1", "predict_query": "SELECT races.", "question": "List the names of all races that occurred in the earliest recorded year and month."}
{"db_id": "formula_1", "predict_query": "SELECT drivers.forename, drivers.surname, driverStandings.points\nFROM drivers\nJOIN driverStandings\nON drivers.driverId = driverStandings.driverId\nORDER BY driverStandings.points DESC\nLIMIT 1", "question": "State the driver with the most points scored. Find his full name with that points."}
{"db_id": "formula_1", "predict_query": "SELECT lapTimes.driverId, drivers.driverRef, races.raceName, lapTimes.time\nFROM lapTimes\nJOIN drivers ON lapTimes.driverId = drivers.driverId\nJOIN races ON lapTimes.raceId = races.raceId\nORDER BY lapTimes.time ASC", "question": "What is the best lap time recorded? List the driver and race with such recorded lap time."}
{"db_id": "formula_1", "predict_query": "SELECT AVG(lapTimes.time)\nFROM lapTimes\nJOIN drivers ON lapTimes.driverId = drivers.driverId\nJOIN races ON lapTimes.raceId = races.raceId\nWHERE drivers.driverRef = 'hamilton'\nAND races.year = 2009\nAND races.round = 'malaysian'", "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?"}
{"db_id": "formula_1", "predict_query": "SELECT COUNT(DISTINCT races.year) / (SELECT COUNT(DISTINCT races.year) FROM races WHERE races.year >= 2010) * 100\nFROM races\nJOIN pitStops ON races.raceId = pitStops.raceId\nJOIN drivers ON pitStops.driverId = drivers.driverId\nWHERE drivers.code = 'HAM' AND pitStops.stop = 1 AND races.", "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010."}
{"db_id": "formula_1", "predict_query": "SELECT drivers.surname, drivers.nationality, MAX(driverStandings.points)\nFROM drivers\nJOIN driverStandings\nON drivers.driverId = driverStandings.driverId\nGROUP BY drivers.surname, drivers.nationality\nORDER BY MAX(driverStandings.points) DESC\nLIMIT 1", "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores."}
{"db_id": "formula_1", "predict_query": "SELECT \n    drivers.forename, \n    drivers.surname, \n    drivers.dob \nFROM \n    drivers \nWHERE \n    drivers.nationality = 'Japanese' \nORDER BY \n    drivers.dob \nLIMIT 1;", "question": "How old is the youngest Japanese driver? What is his name?"}
{"db_id": "formula_1", "predict_query": "SELECT races.name, circuits.name, circuits.location\nFROM races\nJOIN circuits\nON races.circuitId = circuits.circuitId\nWHERE races.date LIKE '%-09-%'", "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005."}
{"db_id": "formula_1", "predict_query": "SELECT races.name, qualifying.number\nFROM qualifying\nJOIN races ON races.raceId = qualifying.raceId\nWHERE qualifying.driverId = (SELECT driverId FROM drivers WHERE givenName = 'Alex' AND familyName = 'Yoong') AND qualifying.number < 20", "question": "Which race was Alex Yoong in when he was in track number less than 20?"}
{"db_id": "formula_1", "predict_query": "SELECT races.name, races.year\nFROM races\nJOIN lapTimes ON races.raceId = lapTimes.raceId\nJOIN drivers ON lapTimes.driverId = drivers.driverId\nWHERE drivers.forename = 'Michael' AND drivers.surname = 'Schumacher'\nORDER BY lapTimes.milliseconds ASC\nLIMIT 1", "question": "State the race and year of race in which Michael Schumacher had his fastest lap."}
{"db_id": "formula_1", "predict_query": "SELECT races.name, driverStandings.points\nFROM races\nJOIN driverStandings\nON races.raceId = driverStandings.raceId\nWHERE driverStandings.driverId = 1\nORDER BY races.year, races.round", "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?"}
{"db_id": "formula_1", "predict_query": "SELECT COUNT(DISTINCT races.raceId) / COUNT(DISTINCT races.raceId) * 100\nFROM races\nJOIN circuits ON races.circuitId = circuits.circuitId\nWHERE circuits.country = 'Germany' AND races.name LIKE '%Grand Prix%'", "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?"}
{"db_id": "formula_1", "predict_query": "SELECT name FROM circ", "question": "What's the location coordinates of Silverstone Circuit?"}
{"db_id": "formula_1", "predict_query": "SELECT name FROM drivers WHERE driverId IN (SELECT driverId FROM driverStandings WHERE raceId IN (SELECT raceId FROM races WHERE year = 2016))", "question": "What's the reference name of Marina Bay Street Circuit?"}
{"db_id": "formula_1", "predict_query": "SELECT forename, surname, MAX(wins)\nFROM drivers\nJOIN driverStandings\nON drivers.driverId = driverStandings.driverId", "question": "Which country is the oldest driver from?"}
{"db_id": "formula_1", "predict_query": "SELECT DISTINCT drivers.reference AS driver_reference\nFROM pitStops\nJOIN races ON races.raceId = pitStops.raceId\nJOIN drivers ON drivers.driverId = pitStops.driverId\nWHERE races.year = 2007 AND races.circuitId = 3\nORDER BY pitStops.position ASC", "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name."}
{"db_id": "formula_1", "predict_query": "SELECT races.name, qualifying.position\nFROM qualifying\nJOIN races\nON qualifying.raceId = races.raceId\nWHERE qualifying.driverId = 1\nORDER BY qualifying.position", "question": "In which Formula_1 race did Lewis Hamilton rank the highest?"}
{"db_id": "formula_1", "predict_query": "SELECT AVG(position)", "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?"}
{"db_id": "formula_1", "predict_query": "SELECT position\nFROM qualifying\nWHERE driverId = (SELECT driverId\n                  FROM drivers\n                  WHERE driverRef = 'HAM')\n  AND raceId = (SELECT raceId\n                FROM races\n                WHERE year = 2008\n                  AND round = 3\n                  AND country = 'China')", "question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?"}
{"db_id": "formula_1", "predict_query": "SELECT time\nFROM lapTimes\nWHERE raceId = (SELECT raceId\n               FROM races\n               WHERE year = 2008 AND country = 'Australia' AND raceName = 'Chinese')\n  AND position = 2", "question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?"}
{"db_id": "formula_1", "predict_query": "SELECT drivers.name\nFROM driverStandings\nJOIN drivers ON driverStand", "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?"}
{"db_id": "formula_1", "predict_query": "SELECT (\n    SELECT time\n    FROM lapTimes\n    WHERE raceId = 1 AND position = 1\n) - (\n    SELECT time\n    FROM lapTimes\n    WHERE raceId = 1 AND position = 22\n)", "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?"}
{"db_id": "formula_1", "predict_query": "SELECT name FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'", "question": "How many circuits are there in Adelaide, Australia?"}
{"db_id": "formula_1", "predict_query": "SELECT MAX(points) FROM constructorResults WHERE constructorId IN (SELECT constructorId FROM constructors WHERE nationality", "question": "What are the maximum points of British constructors?"}
{"db_id": "formula_1", "predict_query": "SELECT constructors.name\nFROM constructors\nJOIN constructor", "question": "Please list the constructor names with 0 points at race 291."}
{"db_id": "formula_1", "predict_query": "", "question": "How many Japanese constructors have 0 points in 2 races?"}
{"db_id": "formula_1", "predict_query": "SELECT \n    races.year, \n    COUNT(DISTINCT races.raceId) AS total_races, \n    COUNT(DISTINCT driverStandings.driverStandingsId) AS completed_races, \n    COUNT(DISTINCT driverStandings.driverStandingsId) / COUNT(DISTINCT races.raceId) AS completion_percentage \nFROM \n    races \n    JOIN driverStandings ON races", "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009."}
{"db_id": "formula_1", "predict_query": "SELECT races.year, AVG(CAST(REPLACE(time, ':', '') AS INTEGER))\nFROM races\nJOIN lapTimes ON races.raceId = lapTimes.raceId\nJOIN drivers ON lapTimes.driverId = drivers.driverId\nJOIN constructors ON drivers.constructorId = constructors.constructorId\nWHERE constructors.name = 'Champion'\nAND races.year < 1975", "question": "What is the average time in seconds of champion for each year, before year 1975?"}
{"db_id": "formula_1", "predict_query": "SELECT name\nFROM circuits\nWHERE", "question": "What is the fastest lap number of the champion in 2009?"}
{"db_id": "formula_1", "predict_query": "SELECT AVG(lapTimes.time)\nFROM lapTimes\nJOIN races\nON lapTimes.raceId = races.raceId\nWHERE races.year = 2009 AND races.circuitId = 18", "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?"}
{"db_id": "formula_1", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM driverStandings WHERE driverStandings.raceId IN (SELECT races.raceId FROM races WHERE races.year >= 2000 AND races.year <= 2005) AND driverStandings.driverId IN (SELECT drivers.driverId FROM drivers WHERE drivers.dateOfBirth < '1985-01-01') AND driverStandings.lap > 50) / (SELECT", "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?"}
{"db_id": "formula_1", "predict_query": "SELECT COUNT(*)\nFROM lapTimes\nWHERE time < '", "question": "How many French drivers who obtain the laptime less than 02:00.00?"}
{"db_id": "formula_1", "predict_query": "SELECT code FROM drivers WHERE nationality = 'American';", "question": "List out the code for drivers who have nationality in American."}
{"db_id": "formula_1", "predict_query": "SELECT d.code, d.dob, d.nationality\nFROM drivers d\nJOIN driverStandings ds\nON d.driverId = ds.driverId\nORDER BY d.dob DESC\nLIMIT 3", "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?"}
{"db_id": "formula_1", "predict_query": "SELECT drivers.forename || ' '", "question": "Please state the reference name of the oldest German driver."}
{"db_id": "formula_1", "predict_query": "SELECT d.driverId, d.code\nFROM drivers d, lapTimes l\nWHERE d.driverId = l.driverId\nAND d.dateOfBirth BETWEEN '1971-01-01' AND '1971-12-31'\nAND l.time = (SELECT MIN(time) FROM lapTimes WHERE driverId = d.driverId)", "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers."}
{"db_id": "formula_1", "predict_query": "SELECT name\nFROM races\nWHERE name = 'Finishers'\nORDER BY finishers DESC\nLIMIT", "question": "From race no. 50 to 100, how many finishers have been disqualified?"}
{"db_id": "formula_1", "predict_query": "SELECT location, lat, lng\nFROM circuits\nWHERE country = 'Austria'", "question": "How many times the circuits were held in Austria? Please give their location and coordinates."}
{"db_id": "formula_1", "predict_query": "SELECT races.year, races.name, races.date, races.time\nFROM races\nJOIN qualifying ON races.raceId = qualifying.raceId\nJOIN drivers ON qualifying.driverId = drivers.driverId\nWHERE drivers.birthDate = (SELECT MAX(birthDate) FROM drivers)", "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race."}
{"db_id": "formula_1", "predict_query": "SELECT \n    drivers.code, \n    drivers.forename, \n    drivers.surname, \n    AVG(pitStops.duration) AS avg_duration \nFROM \n    pitStops \n    JOIN drivers ON pitStops.driverId = drivers.driverId \nWHERE \n    drivers.nationality = 'German' \n    AND drivers.dateOfBirth BETWEEN '1", "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985."}
{"db_id": "formula_1", "predict_query": "SELECT DISTINCT\n    drivers.driverId,\n    drivers.forename,\n    drivers.surname,\n    lapTimes.time\nFROM\n    lapTimes\n    INNER JOIN drivers ON lapTimes.driverId = drivers.driverId\n    INNER JOIN races ON lapTimes.raceId = races.raceId\nWHERE\n    races.year = 2008\n    AND races.name = 'Canadian Grand Prix'\n    AND", "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time."}
{"db_id": "formula_1", "predict_query": "SELECT constructors.name, constructors.url\nFROM constructors\nJOIN constructorResults ON constructors.constructorId = constructorResults.constructorId\nJOIN races ON constructorResults.raceId = races.raceId\nWHERE races.year = 2009 AND races.round = 17 AND constructorResults.points = 1", "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website."}
{"db_id": "superhero", "predict_query": "SELECT superpower.power_name\nFROM superpower\nJOIN hero_power ON superpower.id = hero_power.power_id\nJOIN superhero ON hero_power.hero_id = superhero.id\nWHERE superhero.superhero_name = '3-D Man'", "question": "Please list all the superpowers of 3-D Man."}
{"db_id": "formula_1", "predict_query": "SELECT \n    SUM(points) AS score,\n    constructors.name,\n    constructors.nationality\nFROM\n    constructors\n        JOIN races ON constructors.constructorId = races.constructorId\n        JOIN results ON races.raceId = results.raceId\nWHERE\n    races.year >= 1980\n        AND races.year <= 2010\n        AND races.circuitId = 3\nGROUP", "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team."}
{"db_id": "formula_1", "predict_query": "SELECT DISTINCT\n    drivers.forename || ' ' || drivers.surname AS fullName\nFROM\n    qualifying\n    JOIN drivers ON qualifying.driverId = drivers.driverId\n    JOIN races ON qualifying.raceId = races.raceId\n    JOIN circuits ON races.circuitId = circuits.circuitId\nWHERE\n    races.year = 2008\n    AND circuits.name = 'Marina", "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?"}
{"db_id": "formula_1", "predict_query": "SELECT \n    drivers.given, \n    drivers.family, \n    drivers.nationality, \n    races.name \nFROM \n    drivers, \n    races, \n    qualifying \nWHERE \n    drivers.driverId = qualifying.driverId \n    AND races.raceId = qualifying.raceId \n    AND qualifying.position = 1 \nORDER BY \n    drivers.", "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined."}
{"db_id": "formula_1", "predict_query": "SELECT \n    MAX(accidents)\nFROM\n    (\n        SELECT \n            COUNT(accidents) AS accidents\n        FROM\n            pitStops\n        WHERE\n            raceId = (\n                SELECT \n                    raceId\n                FROM\n                    races\n                WHERE\n                    circuitName = 'Circuit Gilles Villeneuve'\n            )\n        GROUP BY\n            driverId\n    )", "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?"}
{"db_id": "formula_1", "predict_query": "SELECT drivers.name, lapTimes.time, lapTimes.milliseconds\nFROM lapTimes\nJOIN drivers\nON lapTimes.driverId = drivers.driverId\nORDER BY lapTimes.milliseconds\nLIMIT 20", "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names."}
{"db_id": "formula_1", "predict_query": "SELECT \n    races.name, \n    races.year, \n    races.date, \n    lapTimes.lap, \n    lapTimes.position, \n    lapTimes.time, \n    lapTimes.milliseconds, \n    circuits.name \nFROM \n    lapTimes \n    JOIN races ON lapTimes.raceId = races.raceId \n    JOIN circuits ON races.circuitId =", "question": "Please list the lap records for the circuits in Italy."}
{"db_id": "superhero", "predict_query": "SELECT COUNT(*)\nFROM superhero\nJOIN hero_power ON superhero.id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.superpower_name = \"Super Strength\"\nAND superhero.height_cm > 200", "question": "Among the superheroes with the super power of \"Super Strength\", how many of them have a height of over 200cm?"}
{"db_id": "superhero", "predict_query": "SELECT COUNT(*)\nFROM hero_power\nJOIN superhero ON hero_power.hero_id = superhero.id\nJOIN colour ON superhero.eye_colour_id = colour.id\nWHERE colour.colour_name = 'Blue'\nAND hero_power.power_id = (SELECT id FROM superpower WHERE power_name = 'Agility')", "question": "Among the superheroes with blue eyes, how many of them have the super power of \"Agility\"?"}
{"db_id": "superhero", "predict_query": "SELECT superhero_name\nFROM superhero\nWHERE eye_colour_id = (SELECT id\n                       FROM colour\n                       WHERE colour_name = 'blue')\n  AND hair_colour_id = (SELECT id\n                       FROM colour\n                       WHERE colour_name = 'blond');", "question": "Please list the superhero names of all the superheroes that have blue eyes and blond hair."}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name, superhero.height_cm\nFROM superhero\nJOIN publisher\nON superhero.publisher_id = publisher.id\nWHERE publisher.publisher_name = 'Marvel Comics'\nORDER BY superhero.height_cm DESC;", "question": "Rank heroes published by Marvel Comics by their height in descending order."}
{"db_id": "superhero", "predict_query": "SELECT eye_colour.colour_name, COUNT(superhero.id) AS count\nFROM superhero\nJOIN eye_colour ON superhero.eye_colour_id = eye_colour.id\nGROUP BY eye_colour.colour_name\nORDER BY count DESC", "question": "Rank superheroes from Marvel Comics by their eye color popularity, starting with the most common color."}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name\nFROM superhero\nJOIN hero_power ON hero_power.hero_id = superhero.id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.power_name = 'Super Strength'\nAND superhero.publisher_id = 1", "question": "List the superheroes from Marvel Comics who have the super power of 'Super Strength'."}
{"db_id": "superhero", "predict_query": "SELECT publisher.publisher_name, superhero.superhero_name, superhero.height_cm, superhero.weight_kg\nFROM superhero\nJOIN publisher\nON superhero.publisher_id = publisher.id\nORDER BY superhero.height_cm ASC\nLIMIT 1", "question": "Which publisher published the slowest superhero?"}
{"db_id": "superhero", "predict_query": "SELECT superhero_name\nFROM superhero\nWHERE id = (\n    SELECT hero_id\n    FROM hero_power", "question": "How many gold-eyed superheroes did Marvel Comics publish?"}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name, hero_attribute.attribute_value\nFROM superhero\nJOIN hero_attribute\nON superhero.id = hero_attribute.hero_id\nWHERE hero_attribute.attribute_id = 1\nORDER BY hero_attribute.attribute_value ASC\nLIMIT 1", "question": "Who is the dumbest superhero?"}
{"db_id": "superhero", "predict_query": "SELECT race.race", "question": "What is Copycat's race?"}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name, hero_attribute.attribute_value\nFROM superhero\nJOIN hero_attribute\nON superhero.id = hero_attribute.hero_id\nWHERE hero_attribute.attribute_id = 1\nAND hero_attribute.attribute_value < 50;", "question": "Which superheroes have a durability attribute value of less than 50?"}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name\nFROM superhero\nJOIN hero_power ON hero_power.hero_id = superhero.id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.superpower_name = 'Death Touch';", "question": "What are the names of the superheroes with the power of death touch?"}
{"db_id": "superhero", "predict_query": "SELECT COUNT(*)\nFROM superhero\nJOIN hero_attribute\nON superhero.id = hero_attribute.hero_id\nJOIN attribute\nON hero_attribute.attribute_id = attribute.id\nWHERE superhero.gender_id = 2\nAND attribute.attribute_name = 'strength'\nAND hero_attribute.attribute_value = 100;", "question": "How many female superheroes have a strength value of 100?"}
{"db_id": "superhero", "predict_query": "SELECT COUNT(superhero.id) / (SELECT COUNT(superhero.id) FROM superhero) * 100 AS percentage, COUNT(superhero.id) AS count\nFROM superhero\nJOIN hero_attribute ON hero_attribute.hero_id = superhero.id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE attribute.attribute_name = 'self_interest'", "question": "What is the percentage of superheroes who act in their own self-interest or make decisions based on their own moral code? Indicate how many of the said superheroes were published by Marvel Comics."}
{"db_id": "superhero", "predict_query": "SELECT COUNT(superhero.id) AS num_superheroes, publisher.publisher_name\nFROM superhero\nJOIN publisher ON superhero.publisher_id = publisher.id\nGROUP BY publisher.id", "question": "Between DC and Marvel Comics, which publisher has published more superheroes? Find the difference in the number of superheroes they have published."}
{"db_id": "superhero", "predict_query": "SELECT publisher.id\nFROM publisher\nWHERE publisher.publisher_name = 'Star Trek';", "question": "Give the publisher ID of Star Trek."}
{"db_id": "superhero", "predict_query": "SELECT COUNT(*)\nFROM superhero\nWHERE full_name IS NOT NULL", "question": "What is the total number of superheroes without full name?"}
{"db_id": "superhero", "predict_query": "SELECT publisher_name\nFROM publisher\nWHERE id = (\n    SELECT publisher_", "question": "What is the average weight of all female superheroes?"}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name, superpower.superpower_name\nFROM superhero\nJOIN hero_power ON superhero.id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superhero.gender_id = 1\nLIMIT 5;", "question": "List down at least five superpowers of male superheroes."}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name\nFROM superhero\nWHERE superhero.height_cm >= 170 AND superhero.height_cm <= 190 AND superhero.eye_colour_id IS NULL", "question": "Among the superheroes with height from 170 to 190, list the names of the superheroes with no eye color."}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name, colour.colour_name\nFROM superhero\nJOIN colour ON superhero.hair_colour_id = colour.id\nWHERE superhero.height_cm = 185", "question": "Provide the hair colour of the human superhero who is 185 cm tall."}
{"db_id": "superhero", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM hero_attribute WHERE attribute_id = 1 AND attribute_value >= 150 AND attribute_value <= 180) AS total_heroes,\n    (SELECT COUNT(*) FROM hero_attribute WHERE attribute_id = 1 AND attribute_value >= 150 AND attribute_value <= 180 AND hero_id IN (SELECT hero_id FROM hero_power WHERE power_id IN", "question": "In superheroes with height between 150 to 180, what is the percentage of heroes published by Marvel Comics?"}
{"db_id": "superhero", "predict_query": "SELECT superhero_name\nFROM superhero\nWHERE gender_id = 1 AND weight_kg > (SELECT AVG(weight_kg) * 0.79\n                                    FROM superhero);", "question": "Among the male superheroes, list the super hero names of superheroes with weight greater than the 79% average weight of all superheroes."}
{"db_id": "superhero", "predict_query": "SELECT superpower.superpower_name\nFROM superhero\nJOIN hero_power\nON superhero.id = hero_power.hero_id\nJOIN superpower\nON hero_power.power_id = superpower.id\nWHERE superhero.id = 1", "question": "What are the superpowers of heroes with ID 1?"}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name\nFROM hero_attribute\nJOIN superhero ON hero_attribute.hero_id = superhero.id\nWHERE attribute_id", "question": "How many heroes have stealth power?"}
{"db_id": "superhero", "predict_query": "SELECT superhero.full_name, hero_attribute.attribute_value\nFROM superhero\nJOIN hero_attribute\nON superhero.id = hero_attribute.hero_id\nWHERE hero_attribute.attribute_id = 1\nORDER BY hero_attribute.attribute_value DESC\nLIMIT 1", "question": "What is the hero's full name with the highest attribute in strength?"}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name, hero_attribute.attribute_value\nFROM superhero\nJOIN hero_attribute ON hero_attribute.hero_id = superhero.id\nJOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE superhero.publisher_id = 2\nAND attribute.attribute_name = 'Durability'\nORDER BY hero_attribute.attribute_value DESC\nLI", "question": "Which superhero has the most durability published by Dark Horse Comics?"}
{"db_id": "superhero", "predict_query": "SELECT colour.colour_name AS eye_colour, colour.colour_name AS hair_colour, colour.colour_name AS skin_colour\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nJOIN colour ON superhero.hair_colour_id = colour.id\nJOIN colour ON superhero.skin_colour_id = colour", "question": "List the eyes, hair and skin colour of all female superheroes published by Dark Horse Comics."}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name, publisher.publisher_name\nFROM superhero\nJOIN hero_attribute ON hero_attribute.hero_id = superhero.id\nJOIN attribute ON attribute.id = hero_attribute.attribute_id\nJOIN colour ON colour.id = hero_attribute.attribute_value\nWHERE attribute.attribute_name = 'eye_colour'\nOR attribute.attribute_name =", "question": "Which superhero has the same eyes, hair and skin colour? Indicate the publisher of the superhero."}
{"db_id": "superhero", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM superhero WHERE gender_id = 2 AND hair_colour_id = 2) / (SELECT COUNT(*) FROM superhero WHERE gender_id = 2) * 100", "question": "What is the percentage of blue female superheroes among all female superheroes?"}
{"db_id": "superhero", "predict_query": "SELECT publisher_name\nFROM publisher\nWHERE id = (SELECT publisher_id", "question": "How many powers does Amazo hero have?"}
{"db_id": "superhero", "predict_query": "SELECT superhero.height_cm\nFROM superhero\nJOIN hero_attribute ON hero_attribute.hero_id = superhero.id\nJOIN colour ON colour.id = hero_attribute.attribute_id\nWHERE colour.colour_name = 'amber'", "question": "Provide the heights of the heroes whose eye colours are amber."}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name\nFROM superhero\nJOIN hero_attribute ON hero_attribute.hero_id = superhero.id\nJOIN colour ON colour.id = hero_attribute.attribute_id\nWHERE colour.colour_name = 'black'\nGROUP BY superhero.superhero_name\nHAVING COUNT(DISTINCT colour.colour_name) = 2", "question": "List the heroes' names whose eyes and hair colours are both black."}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name\nFROM superhero\nJOIN alignment ON superhero.alignment_id = alignment.id\nWHERE alignment.alignment_name = 'neutral'", "question": "Describe the names of neutral alignment superheroes."}
{"db_id": "superhero", "predict_query": "SELECT hero_attribute.hero_id, hero_attribute.attribute_value\nFROM hero_attribute\nWHERE hero_attribute.attribute_id = 1\nORDER BY hero_attribute.attribute_value DESC", "question": "How many heroes have the highest attribute value in strength?"}
{"db_id": "superhero", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM hero_attribute WHERE attribute_id = 1 AND attribute_value = 2) * 100.0 / (SELECT COUNT(*) FROM hero_attribute WHERE attribute_id = 1)\nFROM hero_attribute", "question": "How many percent of female heroes were published by Marvel Comics?"}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name", "question": "Calculate the difference between Emil Blonsky's weight and Charles Chandler's weight."}
{"db_id": "superhero", "predict_query": "SELECT AVG(height_cm)\nFROM superhero\nWHERE gender_id = 1;", "question": "Calculate the average height for all superhero."}
{"db_id": "superhero", "predict_query": "SELECT superpower.power_name\nFROM superpower\nJOIN hero_power ON hero_power.power_id = superpower.id\nJOIN superhero ON hero_power.hero_id = superhero.id\nWHERE superhero.superhero_name = 'Abomination'", "question": "What is Abomination's superpower?"}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name, superhero.height_cm, superhero.weight_kg, superhero.gender_id, superhero.eye_colour_id, superhero.hair_colour_id, superhero.skin_colour_id, superhero.race_id, superhero.publisher_id, superhero.alignment_id, hero_", "question": "Which hero was the fastest?"}
{"db_id": "superhero", "predict_query": "SELECT hero_attribute.attribute_id, hero_attribute.attribute_value\nFROM hero_attribute\nJOIN superhero ON hero_attribute.hero_id = superhero.id\nWHERE superhero.superhero_name = '3-D Man';", "question": "State all of 3-D Man's attributes along with their values."}
{"db_id": "superhero", "predict_query": "SELECT superhero.superhero_name, colour.colour_name\nFROM superhero\nJOIN colour ON superhero.eye_colour_id = colour.id\nJOIN colour AS colour_1 ON superhero.hair_colour_id = colour_1.id\nWHERE colour.colour_name = 'blue' AND colour_1.colour_name = 'brown'", "question": "Which superheroes have blue eyes with brown hair?"}
{"db_id": "superhero", "predict_query": "SELECT publisher_name\nFROM publisher\nJOIN superhero ON publisher.id = superhero.publisher_id\nWHERE superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy')", "question": "What is the publisher for Hawkman, Karate Kid and Speedy?"}
{"db_id": "superhero", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM hero_attribute WHERE attribute_id =", "question": "Calculate the percentage of superheroes with blue eyes."}
{"db_id": "superhero", "predict_query": "SELECT gender_id, COUNT(*) AS count\nFROM super", "question": "Find the ratio between male superheroes and female superheroes."}
{"db_id": "superhero", "predict_query": "SELECT colour.colour_name\nFROM superhero\nJOIN colour\nON superhero.eye_colour_id = colour.id\nWHERE superhero.full_name = 'Karen Beecher-Duncan'", "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name."}
{"db_id": "superhero", "predict_query": "SELECT \n    COUNT(superhero.id) - COUNT(superhero.weight_kg) AS difference\nFROM \n    superhero\n    JOIN hero_attribute ON hero_attribute.hero_id = superhero.id\n    JOIN attribute ON hero_attribute.attribute_id = attribute.id\nWHERE \n    attribute.attribute_name = 'eye_colour'\n    AND hero_attribute.attribute_value =", "question": "In superheroes with missing weight data, calculate the difference between the number of superheroes with blue eyes and no eye color."}
{"db_id": "superhero", "predict_query": "SELECT publisher.publisher_name, COUNT(*)\nFROM superhero\nJOIN publisher ON super", "question": "How many green-skinned villains are there in the superhero universe?"}
{"db_id": "superhero", "predict_query": "SELECT superhero_name\nFROM superhero\nJOIN hero_power ON superhero.id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.superpower_name = 'control wind'\nORDER BY superhero_name;", "question": "Identify superheroes who can control wind and list their names in alphabetical order."}
{"db_id": "superhero", "predict_query": "SELECT superhero.gender_id, gender.gender_name\nFROM superhero\nJOIN gender ON superhero.gender_id = gender.id\nJOIN hero_power ON superhero.id = hero_power.hero_id\nJOIN superpower ON hero_power.power_id = superpower.id\nWHERE superpower.superpower_name = 'Phoenix Force'", "question": "Identify the gender of the superhero who has the ability of Phoenix Force."}
{"db_id": "superhero", "predict_query": "SELECT publisher.publisher_name, COUNT(superhero.id) AS num_superheroes\nFROM publisher\nJOIN superhero\nON publisher.id = superhero.publisher_id\nGROUP BY publisher.publisher_name", "question": "Which publisher created more superheroes: DC or Marvel Comics? Find the difference in the number of superheroes."}
{"db_id": "codebase_community", "predict_query": "SELECT * FROM users WHERE DisplayName = 'Harlan' OR DisplayName = 'Jarrod Dixon'", "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?"}
{"db_id": "codebase_community", "predict_query": "SELECT users.DisplayName\nFROM users\nWHERE users.CreationDate LIKE '2011%'", "question": "Please list the display names of all the users whose accounts were created in the year 2011."}
{"db_id": "codebase_community", "predict_query": "SELECT COUNT(*)\nFROM users\nWHERE Reputation > 10000;", "question": "How many users last accessed the website after 2014/9/1?"}
{"db_id": "codebase_community", "predict_query": "SELECT OwnerDisplayName\nFROM posts\nWHERE Title = \"Eliciting priors from experts\"", "question": "Who is the owner of the post \"Eliciting priors from experts\"?"}
{"db_id": "codebase_community", "predict_query": "SELECT COUNT(*)\nFROM comments\nWHERE UserId = (SELECT Id\n                FROM users\n                WHERE DisplayName = 'cs", "question": "How many posts does the user csgillespie own?"}
{"db_id": "codebase_community", "predict_query": "SELECT users.DisplayName\nFROM users\nJOIN posts\nON users.Id = posts.LastEditorUserId\nWHERE posts.Title = \"Examples for teaching: Correlation does not mean causation\"", "question": "What is the display name of the user who last edited the post \"Examples for teaching: Correlation does not mean causation\"?"}
{"db_id": "codebase_community", "predict_query": "SELECT AVG(Score) FROM posts WHERE Score > 10", "question": "Among the posts owned by an elder user, how many of them have a score of over 19?"}
{"db_id": "codebase_community", "predict_query": "SELECT posts.Body\nFROM posts\nJOIN tags\nON posts.Id = tags.ExcerptPostId\nWHERE tags.TagName = 'bayesian'", "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post."}
{"db_id": "codebase_community", "predict_query": "SELECT AVG(Score)\nFROM posts\nWHERE OwnerDisplayName = 'csgillespie'\nSQL", "question": "What is the average score of the posts owned by the user csgillespie?"}
{"db_id": "codebase_community", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM posts WHERE score > 5 AND owneruserid IN (SELECT id FROM users WHERE age > 50)) / (SELECT COUNT(*) FROM posts WHERE score > 5) * 100", "question": "Among the posts with a score of over 5, what is the percentage of them being owned by an elder user?"}
{"db_id": "codebase_community", "predict_query": "SELECT\n    posts.FavoriteCount\nFROM\n    posts\n    INNER JOIN comments ON posts.Id = comments.PostId\nWHERE\n    comments.UserId = 3025\n    AND comments.CreationDate = '2014-04-23 20:29:39'", "question": "User No.3025 gave a comment at 20:29:39 on 2014/4/23 to a post, how many favorite counts did that post get?"}
{"db_id": "codebase_community", "predict_query": "SELECT comments.Text, posts.Title, posts.Score\nFROM comments\nJOIN posts\nON comments.PostId = posts.Id\nWHERE comments.UserId = 23853\nAND comments.CreationDate = '2013-07-12 09:08:18'", "question": "User No.23853 gave a comment to a post at 9:08:18 on 2013/7/12, was that post well-finished?"}
{"db_id": "codebase_community", "predict_query": "SELECT AVG(Score)\nFROM posts\nWHERE Tags LIKE \"%java%\"", "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?"}
{"db_id": "codebase_community", "predict_query": "SELECT users.DisplayName\nFROM votes", "question": "Provide the display name of the user who made the vote No.6347."}
{"db_id": "codebase_community", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM", "question": "For the user No.24, how many times is the number of his/her posts compared to his/her votes?"}
{"db_id": "codebase_community", "predict_query": "SELECT COUNT(*)\nFROM comments\nWHERE Post", "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?"}
{"db_id": "codebase_community", "predict_query": "SELECT comments.Id, comments.PostId, comments.Score, comments.Text, comments.CreationDate, comments.UserId, comments.UserDisplayName\nFROM comments\nWHERE comments.Score = 17", "question": "Write the contents of comments with a score of 17."}
{"db_id": "codebase_community", "predict_query": "SELECT\n    comments.UserDisplayName\nFROM\n    comments\nWHERE\n    comments.Text = 'thank you", "question": "Name the user that commented 'thank you user93!'"}
{"db_id": "codebase_community", "predict_query": "SELECT users.DisplayName, users.Reputation\nFROM users\nJOIN posts\nON users.Id = posts.OwnerUserId\nWHERE posts.Title = 'Understanding what Dassault iSight is doing?';", "question": "Which user made a post titled 'Understanding what Dassault iSight is doing?' and how much is the reputation of the user?"}
{"db_id": "codebase_community", "predict_query": "SELECT Title\nFROM posts\nWHERE AnswerCount = (SELECT MAX(AnswerCount)\n                     FROM posts)", "question": "Who is the owner of the post titled 'Open source tools for visualizing multi-dimensional data?'"}
{"db_id": "codebase_community", "predict_query": "SELECT comments.Text, comments.CreationDate, comments.UserDisplayName\nFROM comments\nJOIN posts\nON comments.PostId = posts.Id\nWHERE posts.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'", "question": "Write all the comments left by users who edited the post titled 'Why square the difference instead of taking the absolute value in standard deviation?'"}
{"db_id": "codebase_community", "predict_query": "SELECT users.DisplayName, votes.BountyAmount\nFROM votes\nJOIN posts\nON votes.PostId = posts.Id\nJOIN users\nON votes.UserId = users.Id\nWHERE posts.Title LIKE '%variance%'\nAND votes.BountyAmount = 50", "question": "Which user added a bounty amount of 50 to the post title mentioning variance?"}
{"db_id": "codebase_community", "predict_query": "SELECT posts.Title, posts.Body, posts.ViewCount\nFROM posts\nJOIN tags\nON posts.Id = tags.PostId\nWHERE tags.TagName = 'humor'", "question": "Calculate the average view count of each post tagged as 'humor' and list the title and the comment of each post."}
{"db_id": "codebase_community", "predict_query": "SELECT COUNT(*)\nFROM users\nWHERE", "question": "How many users are awarded with more than 5 badges?"}
{"db_id": "codebase_community", "predict_query": "SELECT DISTINCT users.Id, users.DisplayName, users.Views\nFROM users\nJOIN postHistory ON users.Id = postHistory.UserId\nJOIN posts ON postHistory.PostId = posts.Id\nWHERE users.Views >= 1000\nGROUP BY users.Id\nHAVING COUNT(postHistory.Id) = 1", "question": "Which user have only one post history per post and having at least 1000 views?"}
{"db_id": "codebase_community", "predict_query": "SELECT\n    ROUND(AVG(CASE WHEN YEAR(Date) = 2010 THEN 1 ELSE 0 END), 2) AS Percentage2010,\n    ROUND(AVG(CASE WHEN YEAR(Date) = 2011 THEN 1 ELSE 0 END), 2) AS Percentage2011\nFROM badges\nWHERE Name LIKE '%student%'", "question": "What is the percentage difference of student badges given during 2010 and 2011?"}
{"db_id": "codebase_community", "predict_query": "SELECT AVG(upvotes), AVG(age)\nFROM users\nWHERE id IN (\n    SELECT owneruserid\n    FROM posts\n    GROUP BY owneruserid\n    HAVING COUNT(*) > 10\n)", "question": "What is the average of the up votes and the average user age for users creating more than 10 posts?"}
{"db_id": "codebase_community", "predict_query": "SELECT \n    YEAR(votes.CreationDate) AS Year,\n    COUNT(votes.Id) AS Votes\nFROM votes\nGROUP BY YEAR(votes.CreationDate)", "question": "Calculate the ratio of votes in 2010 and 2011."}
{"db_id": "codebase_community", "predict_query": "SELECT posts.Id, posts.AnswerCount\nFROM posts\nJOIN users\nON posts.OwnerUserId = users.Id\nWHERE users.DisplayName = 'slashnick'\nORDER BY posts.AnswerCount DESC", "question": "Which post by slashnick has the most answers count? State the post ID."}
{"db_id": "codebase_community", "predict_query": "SELECT posts.Title, posts.Score, posts.ViewCount, posts.AnswerCount, posts.CommentCount, posts.FavoriteCount\nFROM posts\nWHERE posts.OwnerUserId IN (SELECT users.Id FROM users WHERE users.DisplayName IN ('Harvey Motulsky', 'Noah Snyder'))", "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?"}
{"db_id": "codebase_community", "predict_query": "SELECT tags.TagName\nFROM tags\nJOIN posts ON tags.Id = posts.Tags\nJOIN users ON posts.OwnerUserId = users.Id\nWHERE users.DisplayName = 'Mark Meckes'\nAND posts.CommentCount = 0", "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments."}
{"db_id": "codebase_community", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM posts WHERE posts.PostTypeId = 1 AND posts.Tags LIKE '%r%') / (SELECT COUNT(*) FROM posts WHERE posts.PostTypeId = 1) * 100", "question": "Based on posts posted by Community, calculate the percentage of posts that use the R language."}
{"db_id": "codebase_community", "predict_query": "SELECT posts.ViewCount - (SELECT ViewCount FROM", "question": "Calculate the difference in view count from post posted by Mornington and view count from posts posted by Amos."}
{"db_id": "codebase_community", "predict_query": "SELECT AVG(COUNT(postLinks.Id))\nFROM postLinks\nJOIN posts ON postLinks.PostId = posts.Id\nWHERE posts.AnswerCount <= 2\nAND posts.CreationDate BETWEEN '2010-01-01' AND '2010-12-31'", "question": "What is the average monthly number of links created in 2010 for posts that have no more than 2 answers?"}
{"db_id": "codebase_community", "predict_query": "SELECT CreationDate\nFROM votes\nWHERE UserId = (SELECT Id\n                FROM users\n                WHERE DisplayName = 'chl')", "question": "When did 'chl' cast its first vote in a post?"}
{"db_id": "codebase_community", "predict_query": "SELECT posts.Title", "question": "What is the display name of the user who acquired the first Autobiographer badge?"}
{"db_id": "codebase_community", "predict_query": "SELECT COUNT(DISTINCT users.Id)\nFROM users\nJOIN posts ON users.Id = posts.OwnerUserId\nJOIN votes ON posts.Id = votes.PostId\nWHERE users.Location LIKE '%United Kingdom%' AND votes.VoteTypeId = 5 AND votes.BountyAmount >= 4", "question": "Among the users located in United Kingdom, how many users whose post have a total favorite amount of 4 or more?"}
{"db_id": "codebase_community", "predict_query": "SELECT posts.Id, posts.Title\nFROM posts\nWHERE posts.OwnerDisplayName = 'Harvey Motulsky'\nORDER BY posts.ViewCount DESC\nLIMIT 1", "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post."}
{"db_id": "codebase_community", "predict_query": "SELECT posts.Id, posts.OwnerDisplayName, posts.Score\nFROM posts\nWHERE posts.CreationDate BETWEEN '2010-01-01' AND '2010-12-31'\nORDER BY posts.Score DESC\nLIMIT 1", "question": "Which is the most valuable post in 2010? Please give its id and the owner's display name."}
{"db_id": "codebase_community", "predict_query": "SELECT \n    CAST(COUNT(posts.Id) AS REAL) / CAST(COUNT(DISTINCT posts.OwnerUserId) AS REAL) AS percentage\nFROM \n    posts\nWHERE \n    posts.CreationDate BETWEEN '2011-01-01' AND '2011-12-31'\n    AND posts.OwnerUserId IN (\n        SELECT", "question": "What is the percentage of posts whose owners had a reputation of over 1000 in 2011?"}
{"db_id": "codebase_community", "predict_query": "SELECT SUM(views) AS total_views, users.displayname AS last_user\nFROM posts\nJOIN users ON users.id = posts.owneruserid\nWHERE title = 'Computer Game Datasets';", "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time."}
{"db_id": "codebase_community", "predict_query": "SELECT COUNT(*)\nFROM comments\nWHERE PostId = (SELECT Id\n                FROM posts\n                ORDER BY Score DESC", "question": "How many comments were added to the post with the highest score?"}
{"db_id": "codebase_community", "predict_query": "SELECT comments.Text, comments.UserDisplayName\nFROM comments\nJOIN posts\nON comments.PostId = posts.Id\nWHERE posts.Title = 'Analysing wind data with R'\nORDER BY comments.CreationDate DESC\nLIMIT 10;", "question": "Provide the text of the latest 10 comments to the post with the title 'Analysing wind data with R' and the display name of the user who left it."}
{"db_id": "codebase_community", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM posts WHERE Score > 50 AND OwnerUserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1)) / (SELECT COUNT(*) FROM posts WHERE OwnerUserId = (SELECT Id FROM users ORDER BY Reputation DESC LIMIT 1)) * 100", "question": "Among all the posts posted by the most influential user, identify the percentage with a score above 50."}
{"db_id": "codebase_community", "predict_query": "SELECT tags.ExcerptPostId, tags.WikiPostId\nFROM tags\nWHERE tags.TagName = 'sample'", "question": "What is the excerpt post ID and wiki post ID of the tag named sample?"}
{"db_id": "codebase_community", "predict_query": "SELECT users.Reputation, users.UpVotes\nFROM comments\nJOIN users\nON comments.UserId = users.Id\nWHERE comments.Text = \"fine, you win :)\"", "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\"."}
{"db_id": "codebase_community", "predict_query": "SELECT comments.Id, comments.Score\nFROM comments\nJOIN posts\nON comments.PostId = posts.Id\nWHERE posts.ViewCount >= 100 AND posts.ViewCount <= 150\nORDER BY comments.Score DESC\nLIMIT 1", "question": "Among the posts with views ranging from 100 to 150, what is the comment with the highest score?"}
{"db_id": "codebase_community", "predict_query": "SELECT COUNT(*)\nFROM comments\nWHERE comments.Score = 0", "question": "In posts with 1 comment, how many of the comments have 0 score?"}
{"db_id": "codebase_community", "predict_query": "SELECT \n    (SELECT COUNT(DISTINCT(c.UserId)) FROM comments c \n        JOIN votes v ON c.UserId = v.UserId \n        WHERE v.VoteTypeId = 2 AND c.Score BETWEEN 5 AND 10) / \n    (SELECT COUNT(DISTINCT(c.UserId)) FROM comments c WHERE c.Score BETWEEN 5 AND 10)", "question": "Among the comments with scores between 5 to 10, what is the percentage of the users with 0 up votes?"}
{"db_id": "card_games", "predict_query": "SELECT cards.name, cards.manaCost, cards.colors, cards.convertedManaCost, cards.power, cards.toughness, cards.type, cards.supertypes, cards.subtypes, cards.text, cards.flavorText, cards.artist, cards.borderColor, cards.frameVersion, cards.frameEffects, cards.hasFoil, cards.hasNonFoil, cards.isAltern", "question": "Which are the cards that have incredibly powerful foils."}
{"db_id": "card_games", "predict_query": "SELECT cards.name, cards.borderColor, cards.hasFoil, cards.hasNonFoil, cards.hasAlternativeDeckLimit, cards.isOnlineOnly, cards.isPromo, cards.isReserved, cards.isStorySpotlight, cards.isTextless, cards.isTimeshifted, cards.isFullArt, cards.isReprint, cards.isStarter, cards.isAltern", "question": "What are the borderless cards available without powerful foils?"}
{"db_id": "card_games", "predict_query": "SELECT cards.name, cards.setCode, cards.rarity, legalities.format, legalities.status\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE cards.rarity = 'Mythic Rarity' AND legalities.format = 'Gladiator' AND legalities.status = 'Banned';", "question": "List all the mythic rarity print cards banned in gladiator format."}
{"db_id": "card_games", "predict_query": "SELECT legalities.status, cards.name\nFROM legalities\nINNER JOIN cards\nON legalities.uuid = cards.uuid\nWHERE legalities.format = 'Vintage'\nAND cards.type NOT LIKE '% // %'\nAND cards.type LIKE '%Artifact%'", "question": "For artifact type of cards that do not have multiple faces on the same card, state its legalities status for vintage play format."}
{"db_id": "card_games", "predict_query": "SELECT cards.id, cards.artist\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE legalities.format = 'commander' AND legalities.status = 'legal' AND cards.power = 'unknown';", "question": "List all the card id and artist with unknown power which are legal for commander play format."}
{"db_id": "card_games", "predict_query": "SELECT cards.name, cards.text, cards.flavorText, cards.originalText, cards.originalType, cards.type, cards.supertypes, cards.subtypes, cards.colors, cards.colorIdentity, cards.colorIndicator, cards.convertedManaCost, cards.faceConvertedManaCost, cards.manaCost, cards.power, cards.toughness, cards.loyalty, cards.hand, cards.life", "question": "Find all cards illustrated by Stephen Daniel and describe the text of the ruling of these cards. State if these cards have missing or degraded properties and values."}
{"db_id": "card_games", "predict_query": "SELECT cards.name, cards.artist, COUNT(rulings.id) AS num_rulings, legalities.format, legalities.status\nFROM cards\nJOIN rulings ON cards.uuid = rulings.uuid\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE legalities.format = 'Commander' AND legalities.status = 'Legal'\nGROUP BY cards.name, cards.artist", "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing."}
{"db_id": "card_games", "predict_query": "SELECT\n    (SELECT COUNT(*) FROM cards WHERE availability LIKE '%Chinese Simplified%') / (SELECT COUNT(*) FROM cards) * 100", "question": "Calculate the percentage of the cards availabe in Chinese Simplified."}
{"db_id": "card_games", "predict_query": "SELECT name\nFROM cards\nWHERE life = (SELECT MAX(life)\n             FROM cards);", "question": "How many cards have infinite power?"}
{"db_id": "card_games", "predict_query": "SELECT convertedManaCost\nFROM cards\nWHERE name = \"Ancestor's Chosen\"", "question": "What is the border color of card \"Ancestor's Chosen\"?"}
{"db_id": "card_games", "predict_query": "SELECT text\nFROM rulings\nWHERE uuid = (\n    SELECT uuid\n    FROM cards\n    WHERE name = \"Benalish Knight\"\n)", "question": "What is the rule of playing card \"Benalish Knight\"?"}
{"db_id": "card_games", "predict_query": "SELECT \n    COUNT(id) / (SELECT COUNT(id) FROM cards) * 100\nFROM cards\nWHERE borderColor = 'borderless'", "question": "What is the percentage of borderless cards?"}
{"db_id": "card_games", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1 AND uuid IN (SELECT uuid FROM foreign_data WHERE language = 'French')) / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1) * 100", "question": "What is the percentage of cards whose language is French among the Story Spotlight cards?"}
{"db_id": "card_games", "predict_query": "SELECT COUNT(*)\nFROM cards\nWHERE text LIKE \"%Deathtouch%\"", "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?"}
{"db_id": "card_games", "predict_query": "SELECT cards.id\nFROM cards\nWHERE cards.duelDeck = 'a'", "question": "What are the cards belong to duel deck a? List the ID."}
{"db_id": "card_games", "predict_query": "SELECT name, life\nFROM cards\nWHERE life = (SELECT MAX(life)\n              FROM cards);", "question": "How many of the banned cards are white border?"}
{"db_id": "card_games", "predict_query": "SELECT cards.name, foreign_data.language, foreign_data.text\nFROM cards\nJOIN foreign_data\nON cards.uuid = foreign_data.uuid\nWHERE cards.colors = 'Artifact'\nAND foreign_data.language != 'en'", "question": "Among the Artifact cards, which are black color and comes with foreign languague translation?"}
{"db_id": "card_games", "predict_query": "SELECT manaCost\nFROM cards\nWHERE layout = 'normal'\nAND frameVersion = '2003'\nAND borderColor = 'black'\nAND availability LIKE '%paper%'\nAND availability LIKE '%mtgo%';", "question": "What is the mana cost of cards with a normal layout, a 2003 frame version, with a black border color, and available in paper and mtgo?"}
{"db_id": "card_games", "predict_query": "SELECT cards.id, cards.name, cards.text, cards.isStorySpotlight\nFROM cards\nWHERE cards.isStorySpotlight = 1", "question": "What is the percentage of Story Spotlight cards that do not have a text box? List them by their ID."}
{"db_id": "card_games", "predict_query": "SELECT name, COUNT(*)\nFROM cards\nGROUP BY name", "question": "How many Brazilian Portuguese translated sets are inside the Commander block?"}
{"db_id": "card_games", "predict_query": "SELECT DISTINCT type FROM cards\nJOIN foreign_data ON cards.uuid = foreign_data.uuid\nWHERE language = 'German'", "question": "Lists all types of cards in German."}
{"db_id": "card_games", "predict_query": "SELECT name\nFROM cards\nWHERE life = (SELECT MAX(life)\n              FROM cards)", "question": "How many unknown power cards contain info about the triggered ability"}
{"db_id": "card_games", "predict_query": "SELECT COUNT(*)\nFROM cards\nWHERE cards.text LIKE '%This is a triggered mana ability.%'\nAND cards.layout NOT LIKE '%split%'\nAND cards.layout NOT LIKE '%flip%'\nAND cards.layout NOT LIKE '%transform%'\nAND cards.layout NOT LIKE '%meld%'\nAND cards.layout NOT LIKE '%modal_dfc%'\nAND cards.layout NOT LIKE '%double_faced_token%'\nAND cards.layout NOT LIKE", "question": "Indicates the number of cards with pre-modern format, ruling text \"This is a triggered mana ability.\" that do not have multiple faces."}
{"db_id": "card_games", "predict_query": "SELECT foreign_data.name\nFROM foreign_data\nJOIN cards\nON foreign_data.uuid = cards.uuid\nWHERE foreign_data.language = 'French'\nAND cards.artist = 'Matthew D. Wilson'\nAND cards.type = 'Creature'\nAND cards.layout = 'normal'\nAND cards.borderColor = 'black'", "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?"}
{"db_id": "card_games", "predict_query": "SELECT DISTINCT language\nFROM foreign_data\nWHERE multiverseid IN (\n    SELECT multiverseId\n    FROM cards\n    WHERE setCode = 'RNA'\n)", "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?"}
{"db_id": "card_games", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM cards WHERE cards.format = 'Commander' AND cards.legal = 'Legal') / (SELECT COUNT(*) FROM cards WHERE cards.format = 'Commander') * 100", "question": "What percentage of cards with format commander and legal status do not have a content warning?"}
{"db_id": "card_games", "predict_query": "SELECT\n    (SELECT COUNT(*) FROM cards", "question": "What percentage of cards without power are in French?"}
{"db_id": "card_games", "predict_query": "SELECT name\nFROM foreign_data\nWHERE multiverseid = 149934", "question": "What is the language of the card with the multiverse number 149934?"}
{"db_id": "card_games", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM cards WHERE layout != 'normal') / (SELECT COUNT(*) FROM cards)", "question": "What proportion of cards do not have a text box with a normal layout?"}
{"db_id": "card_games", "predict_query": "SELECT DISTINCT language\nFROM set_translations\nWHERE setCode = 'ARC';", "question": "What languages are available in the set known as Archenemy on the magic card market and having the code ARC?"}
{"db_id": "card_games", "predict_query": "SELECT DISTINCT setCode\nFROM cards\nWHERE name", "question": "Which foreign language used by \"A Pedra Fellwar\"?"}
{"db_id": "card_games", "predict_query": "SELECT name, life\nFROM cards\nWHERE life IS NOT NULL", "question": "Which card costs more converted mana, \"Serra Angel\" or \"Shrine Keeper\"?"}
{"db_id": "card_games", "predict_query": "SELECT name FROM cards WHERE name LIKE '%Ancestor\\'s Chosen%'", "question": "What's the Italian name of the set of cards with \"Ancestor's Chosen\" is in?"}
{"db_id": "card_games", "predict_query": "SELECT cards.name, foreign_data.name, foreign_data.language\nFROM cards\nJOIN foreign_data\nON cards.uuid = foreign_data.uuid\nWHERE cards.name LIKE '%Ancestor\\'s Chosen%'\nAND foreign_data.language = 'Korean'", "question": "For the set of cards with \"Ancestor's Chosen\" in it, is there a Korean version of it?"}
{"db_id": "card_games", "predict_query": "SELECT name\nFROM cards\nWHERE setCode = 'H10'\nORDER BY convertedM", "question": "Among the cards in the set \"Hauptset Zehnte Edition\", how many of them are designed by Adam Rex?"}
{"db_id": "card_games", "predict_query": "SELECT\n  set_translations.translation\nFROM\n  set_translations\n  JOIN sets ON set_translations.setCode = sets.code\nWHERE\n  sets.name = 'Eighth Edition'\n  AND set_translations.language = 'Simplified Chinese'", "question": "What is the Simplified Chinese translation of the name of the set \"Eighth Edition\"?"}
{"db_id": "card_games", "predict_query": "SELECT cards.name, cards.setCode, legalities.format, legalities.status\nFROM cards\nJOIN legalities\nON cards.uuid = legalities.uuid\nWHERE cards.name = \"Angel of Mercy\"", "question": "Did the set of cards with \"Angel of Mercy\" appear on Magic: The Gathering Online?"}
{"db_id": "card_games", "predict_query": "SELECT COUNT(*)\nFROM sets\nWHERE sets.code IN (\n    SELECT setCode\n    FROM set_translations\n    WHERE language = 'Italian'\n    AND setCode IN (\n        SELECT code\n        FROM sets\n        WHERE block = 'Ice Age'\n    )\n)", "question": "Among the sets in the block \"Ice Age\", how many of them have an Italian translation?"}
{"db_id": "card_games", "predict_query": "SELECT DISTINCT cards.name, cards.availability\nFROM cards\nWHERE cards.availability NOT LIKE '%United States%'", "question": "Is the set of cards with Adarkar Valkyrie only available outside the United States?"}
{"db_id": "card_games", "predict_query": "", "question": "Among the sets of cards that have an Italian translation, how many of them have a base set number of under 100?"}
{"db_id": "card_games", "predict_query": "SELECT DISTINCT artist FROM cards WHERE setCode = 'CSD' AND artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy')", "question": "Which of these artists have designed a card in the set Coldsnap, Jeremy Jarvis, Aaron Miller or Chippy?"}
{"db_id": "card_games", "predict_query": "SELECT name\nFROM cards\nWHERE setCode = 'Coldsnap' AND convertedManaCost = (", "question": "Among the cards with converted mana cost higher than 5 in the set Coldsnap, how many of them have unknown power?"}
{"db_id": "card_games", "predict_query": "SELECT\n    foreign_data.flavorText\nFROM\n    foreign_data\n    JOIN cards ON foreign_data.uuid = cards.uuid\nWHERE\n    cards.name = \"Ancestor's Chosen\"\n    AND foreign_data.language = \"Italian\"", "question": "What is the Italian flavor text of the card \"Ancestor's Chosen\"?"}
{"db_id": "card_games", "predict_query": "SELECT text\nFROM rulings\nWHERE uuid IN (\n    SELECT uuid\n    FROM cards\n    WHERE setCode = 'Coldsnap'\n)", "question": "Please list the Italian text ruling of all the cards in the set Coldsnap."}
{"db_id": "card_games", "predict_query": "SELECT name, convertedManaCost FROM cards WHERE setCode = 'Coldsnap' AND convertedManaCost = (SELECT MAX(convertedManaCost) FROM cards WHERE setCode = 'Coldsnap') AND name IN (SELECT name FROM foreign_data WHERE language = 'Italian')", "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost."}
{"db_id": "card_games", "predict_query": "SELECT\n    (SELECT COUNT(*) FROM cards WHERE convertedManaCost = 7) / (SELECT COUNT(*) FROM cards)\nFROM\n    cards\nWHERE\n    setCode = 'Coldsnap'", "question": "What is the percentage of the cards with a converted mana cost of 7 in the set Coldsnap?"}
{"db_id": "card_games", "predict_query": "SELECT\n    COUNT(cards.name) / (SELECT COUNT(name) FROM cards WHERE setCode = 'CSP') * 100\nFROM\n    cards\nWHERE\n    cards.power > 10\n    AND cards.setCode = 'CSP'", "question": "What is the percentage of incredibly powerful cards in the set Coldsnap?"}
{"db_id": "card_games", "predict_query": "", "question": "Which of the play format has the highest number of banned status? Indicate the play format and the names of all the card meet the condition."}
{"db_id": "card_games", "predict_query": "SELECT cards.name, legalities.format, legalities.status\nFROM cards\nJOIN legalities\nON cards.uuid = legalities.uuid\nWHERE legalities.status = 'Banned'\nORDER BY cards.edhrecRank ASC", "question": "Which cards are ranked 1st on EDHRec? List all of the cards name and its banned play format."}
{"db_id": "card_games", "predict_query": "SELECT cards.name, legalities.format\nFROM cards\nJOIN legalities\nON cards.uuid = legalities.uuid\nWHERE legalities.status = 'legal'\nAND cards.setCode = 'HOU'", "question": "List the names of all the cards in the set Hour of Devastation and find the formats in which these cards are legal."}
{"db_id": "card_games", "predict_query": "SELECT DISTINCT sets.name\nFROM sets\nJOIN set_translations ON sets.code = set_translations.setCode\nWHERE set_translations.language = 'Korean'\nAND sets.code NOT IN (\n    SELECT DISTINCT setCode\n    FROM set_translations\n    WHERE language = 'Japanese'\n);", "question": "Find and list the names of sets which doesn't have Japanese translation but have Korean translation."}
{"db_id": "card_games", "predict_query": "SELECT DISTINCT frameVersion, name, status\nFROM cards\nJOIN legalities ON cards.uuid = legalities.uuid\nWHERE artist = 'Allen Williams'\nORDER BY frameVersion, name;", "question": "List all the frame styles and cards Allen Williams worked on and find any banned cards if there are any."}
{"db_id": "toxicology", "predict_query": "SELECT bond_type, COUNT(*) AS count\nFROM", "question": "What is the most common bond type?"}
{"db_id": "toxicology", "predict_query": "SELECT AVG(num_oxygen)\nFROM (\n    SELECT COUNT(atom.atom_id) AS num_oxygen\n    FROM atom\n    JOIN bond ON atom.molecule_id = bond.molecule_id\n    WHERE atom.element = 'O' AND bond.bond_type = 'single'\n    GROUP BY atom.molecule_id\n)", "question": "Calculate the average number of oxygen atoms in single-bonded molecules."}
{"db_id": "toxicology", "predict_query": "SELECT AVG(COUNT(bond.bond_id))\nFROM bond\nJOIN molecule ON bond.molecule_id = molecule.molecule_id\nWHERE molecule.label = 'carcinogenic'\nGROUP BY bond.molecule_id", "question": "On average how many carcinogenic molecules are single bonded?"}
{"db_id": "toxicology", "predict_query": "SELECT molecule.label, bond.bond_type\nFROM molecule\nJOIN bond\nON molecule.molecule_id = bond.molecule_id\nWHERE bond.bond_type = 'triple'", "question": "Find the triple-bonded molecules which are carcinogenic."}
{"db_id": "toxicology", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM bond WHERE bond_type = 'double') / (SELECT COUNT(*) FROM molecule) * 100", "question": "What is the percentage of carbon in double-bond molecules?"}
{"db_id": "toxicology", "predict_query": "SELECT atom.element\nFROM atom\nJOIN connected\nON atom.atom_id = connected.atom_id\nJOIN bond\nON connected.bond_id = bond.bond_id\nWHERE bond.bond_id = 'TR004_8_9'", "question": "What elements are in the TR004_8_9 bond atoms?"}
{"db_id": "toxicology", "predict_query": "SELECT atom.element\nFROM atom\nJOIN bond\nON atom.molecule_id = bond.molecule_id\nWHERE bond.bond_type = 'double'", "question": "What elements are in a double type bond?"}
{"db_id": "toxicology", "predict_query": "SELECT label, COUNT(label) AS count\nFROM atom\nWHERE element = 'H'\nGROUP BY label\nORDER BY count DESC", "question": "Which type of label is the most numerous in atoms with hydrogen?"}
{"db_id": "toxicology", "predict_query": "", "question": "Which element is the least numerous in non-carcinogenic molecules?"}
{"db_id": "toxicology", "predict_query": "SELECT bond.bond_type\nFROM bond\nJOIN connected\nON bond.bond_id = connected.bond_id\nWHERE connected.atom_id = 'TR004_8'\nAND connected.atom_id2 = 'TR004_20'", "question": "What type of bond is there between the atoms TR004_8 and TR004_20?"}
{"db_id": "toxicology", "predict_query": "SELECT COUNT(atom.atom_id)\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nJOIN bond ON molecule.molecule_id = bond.molecule_id\nWHERE atom.element = 'I' OR atom.element = 'S'\nAND bond.bond_type = 'single'", "question": "How many atoms with iodine and with sulfur type elements are there in single bond molecules?"}
{"db_id": "toxicology", "predict_query": "SELECT \n    COUNT(DISTINCT molecule_id) / (SELECT COUNT(DISTINCT molecule_id) FROM molecule) * 100\nFROM molecule\nWHERE molecule_id NOT IN (\n    SELECT molecule_id\n    FROM bond\n    WHERE bond_type = 'F'\n)", "question": "What percentage of carcinogenic-type molecules does not contain fluorine?"}
{"db_id": "toxicology", "predict_query": "SELECT \n    COUNT(bond.bond_id) / COUNT(DISTINCT molecule.molecule_id) * 100\nFROM\n    molecule\n    JOIN bond ON molecule.molecule_id = bond.molecule_id\n    JOIN atom ON molecule.molecule_id = atom.molecule_id\nWHERE\n    bond.bond", "question": "What is the percentage of carcinogenic molecules in triple type bonds?"}
{"db_id": "toxicology", "predict_query": "SELECT molecule_id, label\nFROM molecule\nJOIN bond", "question": "Please list top three elements of the toxicology of the molecule TR000 in alphabetical order."}
{"db_id": "toxicology", "predict_query": "SELECT \n    COUNT(bond_type) / COUNT(*) * 100\nFROM\n    bond\nWHERE\n    bond_type = 'double'\n    AND molecule_id = 'TR008'", "question": "What is the percentage of double bonds in the molecule TR008? Please provide your answer as a percentage with five decimal places."}
{"db_id": "toxicology", "predict_query": "SELECT \n    COUNT(molecule.molecule_id) / (SELECT COUNT(molecule.molecule_id) FROM molecule) * 100\nFROM molecule\nWHERE molecule.label = 'carcinogenic'", "question": "What is the percentage of molecules that are carcinogenic? Please provide your answer as a percentage with three decimal places."}
{"db_id": "toxicology", "predict_query": "SELECT \n    SUM(atom.element = 'H') / COUNT(atom.element) * 100\nFROM\n    atom\nWHERE\n    atom.molecule_id = 'TR206';", "question": "How much of the hydrogen in molecule TR206 is accounted for? Please provide your answer as a percentage with four decimal places."}
{"db_id": "toxicology", "predict_query": "SELECT atom.element, molecule.label\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.label = 'TR060'", "question": "What are the elements of the toxicology and label of molecule TR060?"}
{"db_id": "toxicology", "predict_query": "SELECT bond_type, COUNT(bond_type) AS count\nFROM bond\nWHERE molecule_id = 'TR010'\nGROUP BY bond_type\nORDER BY count DESC\nLIMIT 1;", "question": "Which bond type accounted for the majority of the bonds found in molecule TR010 and state whether or not this molecule is carcinogenic?"}
{"db_id": "toxicology", "predict_query": "SELECT molecule.label\nFROM molecule\nJOIN bond ON molecule.molecule_id = bond.molecule_id\nJOIN atom ON molecule.molecule_id = atom.molecule_id\nWHERE bond.bond_type = 'single'\nAND molecule.label NOT LIKE '%carcinogenic%'\nORDER BY molecule.label", "question": "Please list top three molecules that have single bonds between two atoms and are not carcinogenic in alphabetical order."}
{"db_id": "toxicology", "predict_query": "SELECT label\nFROM molecule\nWHERE molecule_id IN (", "question": "How many bonds which involved atom 12 does molecule TR009 have?"}
{"db_id": "toxicology", "predict_query": "SELECT bond.bond_type, atom.element\nFROM bond\nJOIN atom ON bond.molecule_id = atom.molecule_id\nWHERE bond.bond_id = 'TR001_6_9'", "question": "What are the bond type and the atoms of the bond ID of TR001_6_9?"}
{"db_id": "toxicology", "predict_query": "SELECT molecule_id\nFROM atom\nWHERE atom_id = '19'", "question": "How many connections does the atom 19 have?"}
{"db_id": "toxicology", "predict_query": "SELECT atom.element\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nWHERE molecule.label = \"TR004\"", "question": "List all the elements of the toxicology of the molecule \"TR004\"."}
{"db_id": "toxicology", "predict_query": "SELECT DISTINCT molecule.label\nFROM molecule\nJOIN atom ON molecule.molecule_id = atom.molecule_id\nJOIN bond ON molecule.molecule_id = bond.molecule_id\nWHERE atom.atom_id BETWEEN 21 AND 25\nAND bond.bond_type = 'carcinogenic'", "question": "Among all the atoms from 21 to 25, list all the molecules that are carcinogenic."}
{"db_id": "toxicology", "predict_query": "SELECT bond.bond_id, bond.bond_type, atom.element\nFROM bond\nJOIN connected ON bond.bond_id = connected.bond_id\nJOIN atom ON connected.atom_id = atom.atom_id\nWHERE atom.element = 'P' OR atom.element = 'N'", "question": "What are the bonds that have phosphorus and nitrogen as their atom elements?"}
{"db_id": "toxicology", "predict_query": "SELECT molecule.label, COUNT(bond.bond_type) AS num_double_bonds\nFROM molecule\nJOIN bond ON molecule.molecule_id = bond.molecule_id\nWHERE bond.bond_type = 'double'\nGROUP BY molecule.molecule_id\nORDER BY num_double_bonds DESC\nLIMIT 1", "question": "Is the molecule with the most double bonds carcinogenic?"}
{"db_id": "toxicology", "predict_query": "SELECT AVG(bond_count)\nFROM (\n    SELECT COUNT(bond_id) AS bond_count\n    FROM connected\n    JOIN atom ON connected.atom_id = atom.atom_id\n    WHERE atom.element = 'I'\n    GROUP BY connected.atom_id\n)", "question": "What is the average number of bonds the atoms with the element iodine have?"}
{"db_id": "toxicology", "predict_query": "SELECT DISTINCT atom.element\nFROM atom\nWHERE atom.atom_id NOT IN (\n    SELECT DISTINCT atom_id\n    FROM connected\n    WHERE bond_id IN (\n        SELECT DISTINCT bond_id\n        FROM bond\n        WHERE bond_type = 'single'\n    )\n)", "question": "List all the elements of atoms that can not bond with any other atoms."}
{"db_id": "toxicology", "predict_query": "SELECT atom.atom_id, atom.element, bond.bond_type\nFROM atom\nJOIN bond\nON atom.molecule_id = bond.molecule_id\nWHERE bond.bond_type = 'triple'\nAND bond.molecule_id = (SELECT molecule_id FROM molecule WHERE label = 'TR041')", "question": "What are the atoms of the triple bond with the molecule \"TR041\"?"}
{"db_id": "toxicology", "predict_query": "SELECT atom.element\nFROM atom\nWHERE atom.molecule_id = 'TR144_8_19'", "question": "What are the elements of the atoms of TR144_8_19?"}
{"db_id": "toxicology", "predict_query": "SELECT atom.element\nFROM atom\nJOIN bond\nON atom.molecule_id = bond.molecule_id\nWHERE bond.bond_type = 'triple'", "question": "List the elements of all the triple bonds."}
{"db_id": "toxicology", "predict_query": "SELECT \n    COUNT(bond.bond_id) / COUNT(DISTINCT molecule.molecule_id) * 100\nFROM\n    bond\n    JOIN molecule ON bond.molecule_id = molecule.molecule_id\n    JOIN atom ON molecule.molecule_id = atom.molecule_id\nWHERE\n    bond.bond", "question": "What proportion of single bonds are carcinogenic? Please provide your answer as a percentage with five decimal places."}
{"db_id": "toxicology", "predict_query": "SELECT COUNT(DISTINCT atom.atom_id)\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nJOIN bond ON atom.molecule_id = bond.molecule_id\nWHERE bond.bond_type = 'triple'\nAND atom.element = 'P'\nOR atom.element = 'Br'", "question": "Calculate the total atoms with triple-bond molecules containing the element phosphorus or bromine."}
{"db_id": "toxicology", "predict_query": "SELECT \n    molecule.label, \n    atom.element, \n    COUNT(atom.element) / COUNT(bond.bond_id) * 100 AS percentage \nFROM \n    molecule \n    JOIN bond ON molecule.molecule_id = bond.molecule_id \n    JOIN atom ON molecule.molecule_id = atom.mole", "question": "What is the composition of element chlorine in percentage among the single bond molecules?"}
{"db_id": "toxicology", "predict_query": "SELECT atom.element\nFROM bond\nJOIN connected ON bond.bond_id = connected.bond_id\nJOIN atom ON connected.atom_id = atom.atom_id\nWHERE bond.bond_id = 'TR001_10_11'", "question": "What are the elements for bond id TR001_10_11?"}
{"db_id": "toxicology", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM atom WHERE element = 'Cl') / (SELECT COUNT(*) FROM molecule WHERE label = 'carcinogenic') * 100", "question": "What is the percentage of element chlorine in carcinogenic molecules?"}
{"db_id": "toxicology", "predict_query": "SELECT atom.element, COUNT(atom.element)\nFROM atom\nJOIN molecule ON atom.molecule_id = molecule.molecule_id\nJOIN bond ON molecule.molecule_id = bond.molecule_id\nWHERE bond.bond_type = 'carcinogenic'\nGROUP BY atom.element", "question": "Tally the toxicology element of the 4th atom of each molecule that was carcinogenic."}
{"db_id": "toxicology", "predict_query": "SELECT molecule.label, COUNT(atom.element) / COUNT(molecule.molecule_id)\nFROM molecule\nJOIN atom ON molecule.molecule_id = atom.molecule_id\nWHERE molecule.molecule_id = 'TR006'\nGROUP BY molecule.label", "question": "What is the ratio of Hydrogen elements in molecule ID TR006? List the ratio with its label."}
{"db_id": "toxicology", "predict_query": "SELECT molecule.label, COUNT(atom.atom_id) AS atom_count\nFROM molecule\nJOIN atom\nON molecule.molecule_id = atom.molecule_id\nWHERE molecule.label NOT LIKE '%carcinogenic%'\nGROUP BY molecule.label\nHAVING atom_count > 5", "question": "Which non-carcinogenic molecules consisted more than 5 atoms?"}
{"db_id": "california_schools", "predict_query": "SELECT sname FROM satscores\nWHERE AvgScrMath = (SELECT MAX(AvgScrMath", "question": "How many schools with an average score in Math greater than 400 in the SAT test are exclusively virtual?"}
{"db_id": "california_schools", "predict_query": "SELECT CDSCode FROM schools WHERE Enrollment > 500", "question": "Please list the codes of the schools with a total enrollment of over 500."}
{"db_id": "california_schools", "predict_query": "SELECT schools.['CDSCode'], schools.['School'], frpm.['Percent (%) Eligible Free (Ages 5-17)']\nFROM schools\nJOIN frpm\nON schools.['CDSCode'] = frpm.['CDSCode']\nWHERE frpm.['Percent (%) Eligible Free (Ages 5-17)'] > 0.3", "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?"}
{"db_id": "california_schools", "predict_query": "SELECT schools.CharterNum, satscores.AvgScrWrite\nFROM schools, satscores\nWHERE satscores.AvgScrWrite > 499\nORDER BY satscores.AvgScrWrite DESC", "question": "Rank schools by their average score in Writing where the score is greater than 499, showing their charter numbers."}
{"db_id": "california_schools", "predict_query": "SELECT schools.School, schools.Street, schools.City, schools.State, frpm.Enrollment, frpm.Enrollment, frpm.Ages517\nFROM schools\nJOIN frpm\nON schools.CDSCode = frpm.cds\nWHERE frpm.Enrollment - frpm.Ages517 > 30", "question": "List the names of schools with more than 30 difference in enrollements between K-12 and ages 5-17? Please also give the full street adress of the schools."}
{"db_id": "california_schools", "predict_query": "SELECT schools.School, satscores.NumGE1500\nFROM schools, satscores\nWHERE schools.CDSCode = satscores.cds\nAND satscores.NumGE1500 >= 1500\nAND frpm.Percent (%) Eligible Free (K-12) > 0.1", "question": "Give the names of the schools with the percent eligible for free meals in K-12 is more than 0.1 and test takers whose test score is greater than or equal to 1500?"}
{"db_id": "california_schools", "predict_query": "SELECT schools.['School'], schools.['FundingType']\nFROM schools\nJOIN satscores\nON schools.['CDSCode'] = satscores.['cds']\nWHERE satscores.['AvgScrMath'] > 400\nAND schools.['County'] = 'Riverside'", "question": "Name schools in Riverside which the average of average math score for SAT is grater than 400, what is the funding type of these schools?"}
{"db_id": "california_schools", "predict_query": "SELECT schools.School, schools.Street, schools.City, schools.State, schools.Zip\nFROM schools\nJOIN frpm\nON schools.CDSCode = frpm.CDSCode\nWHERE frpm.Academic Year = '2013-14'\nAND frpm.Free Meal Count (Ages 5-17) > 800\nAND schools.State = 'CA'\nAND schools.", "question": "State the names and full communication address of high schools in Monterey which has more than 800 free or reduced price meals for ages 15-17?"}
{"db_id": "california_schools", "predict_query": "SELECT schools.School, satscores.AvgScrWrite, schools.Phone\nFROM schools, satscores\nWHERE schools.CDSCode = satscores.cds\nAND (schools.OpenDate > '1991-01-01' OR schools.ClosedDate < '2000-01-01')", "question": "What is the average score in writing for the schools that were opened after 1991 or closed before 2000? List the school names along with the score. Also, list the communication number of the schools if there is any."}
{"db_id": "california_schools", "predict_query": "SELECT schools.['School'], schools.['DOCType']\nFROM schools\nJOIN frpm\nON schools.['CDSCode'] = frpm.['CDSCode']\nWHERE frpm.['Charter School'] = 0\nAND frpm.['Enrollment (K-12)'] - frpm.['Enrollment (Ages 5-17)'] > (SELECT AVG(frpm.['Enrollment", "question": "Consider the average difference between K-12 enrollment and 15-17 enrollment of schools that are locally funded, list the names and DOC type of schools which has a difference above this average."}
{"db_id": "california_schools", "predict_query": "SELECT schools.School, frpm.Enrollment, frpm.Percent\nFROM schools, frpm\nWHERE schools.CDSCode = frpm.CDSCode\nAND schools.GradeRange LIKE '%10%'\nOR schools.GradeRange LIKE '%11%'\nORDER BY frpm.Enrollment DESC\nLIMIT 10;", "question": "What is the eligible free rate of the 10th and 11th schools with the highest enrolment for students in grades 1 through 12?"}
{"db_id": "california_schools", "predict_query": "SELECT schools.School, frpm.Free Meal Count (K-12)\nFROM schools, frpm\nWHERE schools.CDSCode = frpm.CDSCode\nAND schools.Ownership Code = 66\nORDER BY frpm.Free Meal Count (K-12) DESC\nLIMIT 5;", "question": "What is the eligible free or reduced price meal rate for the top 5 schools in grades 1-12 with the highest free or reduced price meal count of the schools with the ownership code 66?"}
{"db_id": "california_schools", "predict_query": "SELECT Street, City, Zip, State FROM schools WHERE CDSCode = (SELECT CDSCode FROM frpm ORDER BY Percent (%) Eligible FRPM (K-12) ASC LIMIT 1)", "question": "What is the complete address of the school with the lowest excellence rate? Indicate the Street, City, Zip and State."}
{"db_id": "california_schools", "predict_query": "SELECT schools.['AdmFName1'], schools.['AdmLName1'], schools.['AdmFName2'], schools.['AdmLName2'], schools.['AdmFName3'], schools.['AdmLName3']\nFROM schools\nJOIN satscores ON schools.['CDSCode'] = satscores.['cds']\nWHERE satscores.['NumGE1500'] =", "question": "Under whose administration is the school with the highest number of students scoring 1500 or more on the SAT? Indicate their full names."}
{"db_id": "california_schools", "predict_query": "SELECT AVG(NumTstTakr)\nFROM satscores\nJOIN schools ON satscores.cds = schools.CDSCode\nWHERE schools.OpenDate BETWEEN '1980-01-01' AND '1980-12-31'", "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?"}
{"db_id": "california_schools", "predict_query": "SELECT schools.Phone\nFROM schools\nJOIN satscores\nON schools.CDSCode = satscores.cds\nWHERE satscores.AvgScrRead = (SELECT MIN(AvgScrRead)\n                              FROM satscores\n                              WHERE satscores.rtype = 'ELEM'\n                              AND satscores.dname = 'Fresno Unified')\nSQL", "question": "What is the telephone number for the school with the lowest average score in reading in Fresno Unified?"}
{"db_id": "california_schools", "predict_query": "SELECT satscores.sname, satscores.dname, satscores.cname, satscores.AvgScrRead\nFROM satscores\nJOIN schools\nON satscores.cds = schools.CDSCode\nWHERE schools.Virtual = 'Y'\nORDER BY satscores.AvgScrRead DESC\nLIMIT 5", "question": "List the names of virtual schools that are among the top 5 in their respective counties based on average reading scores."}
{"db_id": "california_schools", "predict_query": "SELECT schools.School, AvgScrWrite\nFROM schools, satscores\nWHERE schools.School = satscores.sname\nAND schools.EdOpsName = 'Ricci Ulrich'\nORDER BY AvgScrWrite DESC;", "question": "What is the average writing score of each of the schools managed by Ricci Ulrich? List the schools and the corresponding average writing scores."}
{"db_id": "california_schools", "predict_query": "SELECT schools.State, COUNT(frpm.Enrollment) AS Enrollment\nFROM schools\nJOIN frpm\nON schools.CDSCode = frpm.CDSCode\nWHERE frpm.DistrictType = 'State Special School'\nGROUP BY schools.State\nORDER BY Enrollment DESC", "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?"}
{"db_id": "california_schools", "predict_query": "SELECT AVG(OpenDate)\nFROM schools\nWHERE County = 'Alameda' AND District = 'Elementary School District' AND OpenDate BETWEEN '1980-01-01' AND '1980-12-31'", "question": "What is the monthly average number of schools that opened in Alameda County under the jurisdiction of the Elementary School District in 1980?"}
{"db_id": "california_schools", "predict_query": "SELECT COUNT(DISTINCT schools.CDSCode) AS MergedUnifiedSchools, COUNT(DISTINCT schools.CDSCode) AS MergedElementarySchools\nFROM schools\nWHERE schools.DistrictType = 'Unified' AND schools.County = 'Orange'", "question": "What is the ratio of merged Unified School District schools in Orange County to merged Elementary School District schools?"}
{"db_id": "california_schools", "predict_query": "SELECT School, Street FROM satscores ORDER BY AvgScrMath DESC LIMIT 7 OFFSET 6", "question": "What is the postal street address for the school with the 7th highest Math average? Indicate the school's name."}
{"db_id": "california_schools", "predict_query": "SELECT COUNT(*) FROM schools\nWHERE schools.County = 'Los Angeles' AND schools.Charter = 0 AND schools.Percent (%) Eligible Free (K-12) < 0.18;", "question": "What is the total number of non-chartered schools in the county of Los Angeles with a percent (%) of eligible free meals for grades 1 through 12 that is less than 0.18%?"}
{"db_id": "california_schools", "predict_query": "SELECT Enrollment FROM frpm WHERE CDSCode = '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "question": "How many students from the ages of 5 to 17 are enrolled at the State Special School school in Fremont for the 2014-2015 academic year?"}
{"db_id": "california_schools", "predict_query": "SELECT schools.CDSCode, schools.County, frpm.Percent (%) Eligible FRPM (Ages 5-17)\nFROM schools\nJOIN frpm\nON schools.CDSCode = frpm.CDSCode\nWHERE schools.County = 'Los Angeles'\nAND frpm.Low Grade = 'Kindergarten'\nAND frpm.High Grade = '9th'", "question": "Which schools served a grade span of Kindergarten to 9th grade in the county of Los Angeles and what is its Percent (%) Eligible FRPM (Ages 5-17)?"}
{"db_id": "california_schools", "predict_query": "SELECT sname FROM satscores WHERE AvgScrRead = (SELECT MAX(Avg", "question": "Between San Diego and Santa Barbara, which county offers the most number of schools that does not offer physical building? Indicate the amount."}
{"db_id": "california_schools", "predict_query": "SELECT schools.", "question": "What is the grade span offered in the school with the highest longitude?"}
{"db_id": "california_schools", "predict_query": "SELECT COUNT(DISTINCT schools.CDSCode) AS num_schools, COUNT(DISTINCT schools.City) AS num_cities, schools.City\nFROM schools\nJOIN frpm ON schools.CDSCode = frpm.CDSCode\nWHERE frpm.District Type = 'Magnet' AND frpm.Low Grade = 'Kindergarten' AND frpm.High Grade = '8th grade'", "question": "Of the schools that offers a magnet program serving a grade span of Kindergarten to 8th grade, how many offers Multiple Provision Types? List the number of cities that offers a Kindergarten to 8th grade span and indicate how many schools are there serving such grade span for each city."}
{"db_id": "california_schools", "predict_query": "SELECT frpm.District Code, frpm.Percent (%) Eligible Free (K-12)\nFROM frpm\nJOIN schools\nON frpm.CDSCode = schools.CDSCode\nWHERE schools.AdmFName1 = 'Alusine'", "question": "What is the Percent (%) Eligible Free (K-12) in the school administered by an administrator whose first name is Alusine. List the district code of the school."}
{"db_id": "california_schools", "predict_query": "SELECT AdmEmail1, AdmEmail2, AdmEmail3\nFROM schools\nWHERE County = 'San Bernardino' AND City = 'San Bernardino City Unified' AND School LIKE '%Intermediate/Middle Schools%' AND School LIKE '%Unified Schools%' AND OpenDate BETWEEN '2009-01-01' AND '2010-12-31'", "question": "What are the valid e-mail addresses of the administrator of the school located in the San Bernardino county, City of San Bernardino City Unified that opened between 1/1/2009 to 12/31/2010 whose school types are public Intermediate/Middle Schools and Unified Schools?"}
{"db_id": "financial", "predict_query": "SELECT COUNT(DISTINCT account.account_id)\nFROM account\nJOIN trans ON account.account_id = trans.account_id\nWHERE trans.type = 'issuance' AND account.district_id = 1", "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?"}
{"db_id": "financial", "predict_query": "SELECT COUNT(", "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?"}
{"db_id": "financial", "predict_query": "SELECT COUNT(*)\nFROM client\nWHERE gender = 'Female' AND district_id = 1", "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?"}
{"db_id": "financial", "predict_query": "SELECT account.account_id, AVG(loan.amount) AS avg_salary\nFROM account\nJOIN loan ON account.account_id = loan.account_id\nJOIN client ON account.client_id = client.client_id\nWHERE client.gender = 'F'\nGROUP BY account.account_id\nORDER BY avg_salary ASC\nLIMIT 1;", "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?"}
{"db_id": "financial", "predict_query": "SELECT account.account_id\nFROM account\nJOIN loan ON account.account_id = loan.account_id\nJOIN district ON account.district_id = district.district_id\nWHERE district.district_id = 1\nGROUP BY account.account_id\nHAVING AVG(loan.amount) = (SELECT AVG(loan.amount)\n                          FROM loan\n                          JOIN account ON loan.account", "question": "List out the account numbers of clients who are youngest and have highest average salary?"}
{"db_id": "financial", "predict_query": "SELECT account.account_id, account.frequency, loan.amount\nFROM account\nJOIN loan\nON account.account_id = loan.account_id\nWHERE loan.date = '1997-01-01'\nORDER BY loan.amount ASC", "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement."}
{"db_id": "financial", "predict_query": "SELECT account.account_id, account.date, loan.amount\nFROM account\nJOIN loan\nON account.account_id = loan.account_id\nWHERE loan.duration > 12\nAND account.date BETWEEN '1993-01-01' AND '1993-12-31'\nORDER BY loan.amount DESC", "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993."}
{"db_id": "financial", "predict_query": "SELECT COUNT(DISTINCT account.account_id)\nFROM account\nJOIN client ON account.account_id = client.client_id\nWHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND account.district_id = 1;", "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?"}
{"db_id": "financial", "predict_query": "SELECT district.A2\nFROM client\nJOIN account\nON client.client_id = account.client_id\nWHERE client.gender = 'F'\nAND client.birth_date = '1976-01-29'", "question": "For the female client who was born in 1976/1/29, which district did she opened her account?"}
{"db_id": "financial", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM client WHERE gender = 'male' AND district_id = (SELECT district_id FROM district WHERE A2 = 'south Bohemia' ORDER BY A8 DESC LIMIT 1)) / (SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district WHERE A2 = 'south Bohemia' ORDER BY A8 DESC LIMIT 1)) * 100", "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?"}
{"db_id": "financial", "predict_query": "SELECT (trans.balance - (SELECT trans.balance FROM trans WHERE trans.date = '1993-03-22' AND trans.account_id = 1)) / (SELECT trans.balance FROM trans WHERE trans.date = '1993-03-22' AND trans.account_id = 1) * 100\nFROM trans\nWHERE trans.account_id = 1\nSQLResult", "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?"}
{"db_id": "financial", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM loan WHERE status = 'paid') / (SELECT COUNT(*) FROM loan) * 100", "question": "What is the percentage of loan amount that has been fully paid with no issue."}
{"db_id": "financial", "predict_query": "SELECT \n    (SELECT COUNT(DISTINCT account_id) FROM loan WHERE amount < 100000 AND status = 'OK') / (SELECT COUNT(DISTINCT account_id) FROM loan WHERE amount < 100000) * 100", "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue."}
{"db_id": "financial", "predict_query": "SELECT district.name, district.unemployment_rate - (SELECT unemployment_rate FROM district WHERE district.name = district.name AND district.year = 1995) AS unemployment_rate_increment\nFROM district\nJOIN account ON district.district_id = account.district_id\nJOIN client ON account.account_id = client.account_id\nJOIN loan ON client.client_id = loan.", "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996."}
{"db_id": "financial", "predict_query": "SELECT district.district_id, COUNT(account.account_id) AS num_female_account_holders\nFROM account\nJOIN client ON account.account_id = client.client_id\nJOIN district ON account.district_id = district.district_id\nWHERE client.gender = 'F'\nGROUP BY district.district_id\nORDER BY num_female_account_holders DESC\nLIMIT", "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders."}
{"db_id": "financial", "predict_query": "SELECT COUNT(DISTINCT account_id)\nFROM loan\nWHERE amount >= 250000 AND status = 'approved' AND date BETWEEN '1995-01-01' AND '1997-12-31' AND account_id IN (SELECT account_id FROM account WHERE frequency = 'monthly')", "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?"}
{"db_id": "financial", "predict_query": "SELECT COUNT(DISTINCT account_id)\nFROM loan\nWHERE status = 'running'", "question": "How many accounts have running contracts in Branch location 1?"}
{"db_id": "financial", "predict_query": "SELECT \n    district.A16,\n    client.gender,\n    client.client_id\nFROM \n    client\n    JOIN account ON client.client_id = account.account_id\n    JOIN district ON account.district_id = district.district_id\nWHERE \n    account.date = '1995-01-01'\nORDER BY \n    district.A16 DESC\nLIMIT", "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?"}
{"db_id": "financial", "predict_query": "SELECT district.A2, SUM(account.frequency) AS total_withdrawals\nFROM account\nJOIN district ON account.district_id = district.district_id\nWHERE account.date BETWEEN '1996-01-01' AND '1996-01-31'\nGROUP BY district.A2\nORDER BY total_withdrawals DESC\nLIMIT 10\nSQLResult", "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?"}
{"db_id": "financial", "predict_query": "SELECT COUNT(DISTINCT account_id)\nFROM loan\nWHERE status = 'running'", "question": "How many accounts have running contracts in Branch location 1?"}
{"db_id": "financial", "predict_query": "SELECT \n    district.A16,\n    client.gender,\n    client.client_id\nFROM \n    client\n    JOIN account ON client.client_id = account.account_id\n    JOIN district ON account.district_id = district.district_id\nWHERE \n    account.date = '1995-01-01'\nORDER BY \n    district.A16 DESC\nLIMIT", "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?"}
{"db_id": "financial", "predict_query": "SELECT account.account_id, account.holder_id, trans.amount\nFROM account\nJOIN trans ON account.account_id = trans.account_id\nWHERE trans.type = 'credit'\nAND trans.date BETWEEN '1998-01-01' AND '1998-12-31'\nAND trans.amount < (SELECT AVG(trans.amount)\n                   FROM trans", "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?"}
{"db_id": "financial", "predict_query": "SELECT DISTINCT A4 FROM account NATURAL JOIN district WHERE A10 > 8000 AND A10 <= 9000 AND A4 NOT IN (SELECT A4 FROM account NATURAL JOIN district NATURAL JOIN loan);", "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000."}
{"db_id": "financial", "predict_query": "SELECT AVG(A14)\nFROM district\nWHERE A14 > 4000\nAND district_id IN (\n    SELECT district_id\n    FROM account\n    WHERE date >= '1997-01-01'\n)", "question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?"}
{"db_id": "financial", "predict_query": "SELECT trans.date, trans.amount, trans.balance, trans.k_symbol, trans.bank, trans.account\nFROM trans\nWHERE trans.type = 'withdrawal' AND trans.operation = 'cash' AND trans.account_id = 3356", "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes."}
{"db_id": "financial", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district WHERE A10 > 10000) AND gender = 'Female') / (SELECT COUNT(*) FROM client WHERE district_id = (SELECT district_id FROM district WHERE A10 > 10000)) * 100", "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?"}
{"db_id": "financial", "predict_query": "SELECT \n    SUM(amount) AS total_amount, \n    date\nFROM \n    loan\nWHERE \n    date BETWEEN '1996-01-01' AND '1997-12-31'\n    AND account_id IN (\n        SELECT \n            account_id\n        FROM \n            account\n        WHERE \n            account.district_id IN (\n                SELECT", "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?"}
{"db_id": "financial", "predict_query": "SELECT trans.date, trans.operation, trans.amount, trans.balance\nFROM trans\nWHERE trans.account_id = 3\nORDER BY trans.date DESC", "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?"}
{"db_id": "financial", "predict_query": "SELECT \n    (SELECT COUNT(*) FROM client WHERE gender = 'Male' AND client_id IN (SELECT client_id FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE frequency = 'Weekly'))) / (SELECT COUNT(*) FROM client WHERE gender = 'Male') * 100", "question": "What percentage of male clients request for weekly statements to be issued?"}
{"db_id": "financial", "predict_query": "SELECT account.account_id\nFROM account\nJOIN client ON account.client_id = client.client_id\nWHERE client.gender = 'F'\nORDER BY client.birth_date, account.amount", "question": "Name the account numbers of female clients who are oldest and have lowest average salary?"}
{"db_id": "financial", "predict_query": "SELECT AVG(amount)", "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?"}
{"db_id": "financial", "predict_query": "SELECT client.client_id, client.birth_date, loan.loan_id\nFROM client\nJOIN loan\nON client.client_id = loan.account_id\nWHERE loan.status = 'eligible'\nAND card.type = 'high level'", "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans."}
